--------------------------------------------------------------------------------------------
⋙ ❍ Разница в уровне охвата (Scope)?
---
Var – Оператор переменных JavaScript используется для объявления переменной и, при желании, мы можем инициализировать значение этой переменной.
var a = 10;
Объявления переменных обрабатываются перед выполнением кода.
Const – идея константных функций не позволяет им изменять объект, для которого они вызываются. Когда функция объявлена ​​как const, ее можно вызывать для любого типа объекта.
Let – это сигнал о том, что переменная может быть переназначена, например, счетчик в цикле или замена значения в алгоритме. Он также сигнализирует, что переменная будет использоваться только в блоке, в котором она определена.

Данный код:
```javascript
function testScope() {
    if (true) {
        var a = "var scope";
        let b = "let scope";
        const c = "const scope";
    }
    console.log(a); // ✅ Выведет: "var scope"
    console.log(b); // ❌ Ошибка: b is not defined
    console.log(c); // ❌ Ошибка: c is not defined
}

testScope();
```

Разбор кода:
1. Переменная `var a` 
   - `var` имеет функциональную область видимости.  
   - Это означает, что если `var` объявлена внутри функции, то она доступна везде внутри этой функции, даже за пределами блока `if`.  
   - Именно поэтому `console.log(a)` успешно выводит `"var scope"`.  

2. Переменные `let b` и `const c`  
   - Оба (`let` и `const`) имеют блочную область видимости.  
   - Они существуют только внутри блока `{ ... }`, в котором объявлены.  
   - За пределами блока `if` переменные `b` и `c` не определены, что вызывает ошибку.  

Правильный подход:
Чтобы избежать нежелательного доступа к переменной `a`, лучше использовать `let` или `const`:

```javascript
function testScope() {
    if (true) {
        let a = "let scope"; // Теперь переменная не доступна за пределами блока
        console.log(a); // ✅ "let scope" — можно использовать внутри блока
    }
    console.log(a); // ❌ Ошибка: a is not defined
}

testScope();
```

Почему `var` не рекомендуется?
- `var` игнорирует блочную область видимости, что может привести к неожиданным ошибкам.  
- `var` может быть переопределена случайно, что делает код менее безопасным.  
- `let` и `const` обеспечивают предсказуемую область видимости и помогают избежать багов.  

Вывод:  
Всегда используйте `let` и `const`** вместо `var`, чтобы избежать неожиданных ошибок и сделать код безопаснее и читаемее. 
--------------------------------------------------------------------------------------------
