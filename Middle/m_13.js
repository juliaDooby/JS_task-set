---------------------------------------------------------------------------------------------  
⋙ ❍ Перепишите пример, используя promise: ?
---
const printSec = (number, callback) => {
  setTimeout(() => {
      console.log(`${number} sec`)
      callback()
    },
    1000)
}
printSec(1, () => {
  printSec(2, () => {
    printSec(3, () => {})
  })
})
Вот пример переписанного кода с использованием промисов:
```javascript
const printSec = (number) => {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            console.log(`${number} sec`);
            resolve();
        }, 1000);
    });
};

printSec(1)
    .then(() => {
        return printSec(2);
    })
    .then(() => {
        return printSec(3);
    })
    .then(() => {
        // Код для завершения цепочки промисов
    })
    .catch((error) => {
        console.error('Произошла ошибка:', error);
    });
```
В этом примере:
- Функция `printSec` возвращает новый промис, который завершится через заданное количество секунд.
- После каждого завершения промиса вызывается следующий промис через метод `then`.
- Метод `catch` используется для обработки любых ошибок, которые могут возникнуть в процессе выполнения промисов.
/1. `printSec` теперь возвращает промис, который выполнится через одну секунду.
2. Мы используем метод `then`, чтобы вызывать `printSec` для каждой секунды по порядку.
3. Каждый вызов `printSec` будет дожидаться завершения предыдущего, благодаря цепочке методов `then`.
4. После завершения всех промисов, мы выводим сообщение "All seconds printed".
---------------------------------------------------------------------------------------------
