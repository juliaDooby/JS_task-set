---------------------------------------------------------------------------------------------
36
⋙ ❍ Что выведет консоль (Аргументируйте свой ответ) ?
---
const obj = {
  name: 'John',
  getName() {
    return this.name;
  }
};
const name1 = obj.getName();
const getName = obj.getName;
const name2 = getName();
console.log(`${name1} ${name2}`); // ?
1
2
3
4
5
6
7
8
9
10
11
const obj = {
  name: 'John',
  getName() {
    return this.name;
  }
};
const name1 = obj.getName();
const getName = obj.getName;
const name2 = getName();
console.log(`${name1} ${name2}`); // ?
В консоль будет выведено:
```
John undefined
```
Это происходит из-за того, что контекст выполнения функции `getName` изменяется при вызове отдельно от объекта `obj`.
1. Переменная `name1` получает значение `John`, потому что функция `getName` вызывается в контексте объекта `obj`, и `this.name` возвращает свойство `name` этого объекта.
2. Переменная `getName` присваивается ссылка на функцию `getName` объекта `obj`, но без привязки к контексту. Поэтому, когда функция `getName` вызывается в контексте глобального объекта (или `undefined` в строгом режиме), `this.name` возвращает `undefined`.
Поэтому, при использовании интерполяции строк `${name1} ${name2}`, первая переменная `name1` будет иметь значение `'John'`, а вторая переменная `name2` будет иметь значение `undefined`.
---------------------------------------------------------------------------------------------
