---------------------------------------------------------------------------------------------    
9. Напишите функцию, которая принимает массив чисел и возвращает самое большое число из массива –
function getMaxNumber(arr) {
    return Math.max(...arr);
}
Ваше решение для нахождения самого большого числа в массиве правильно и эффективно использует метод `Math.max()` в сочетании с оператором расширения (`...`), который разворачивает массив в отдельные аргументы функции.
Вот ваш код:
```javascript
function getMaxNumber(arr) {
    return Math.max(...arr);
}
```
Объяснение:
1. Оператор `...` (spread) разворачивает массив `arr` в отдельные значения, которые передаются в функцию `Math.max()`.
2. `Math.max()` возвращает наибольшее число среди переданных аргументов.
Пример использования:
```javascript
console.log(getMaxNumber([1, 2, 3, 4, 5]));  // 5
console.log(getMaxNumber([-10, -5, 0, 10])); // 10
console.log(getMaxNumber([100, 200, 300]));  // 300
```
Результат:
- Для массива `[1, 2, 3, 4, 5]` функция вернет 5, так как это самое большое число в массиве.
- Для массива `[-10, -5, 0, 10]` функция вернет 10, так как это наибольшее число.
Альтернативное решение с использованием цикла:
Если по каким-то причинам вы не хотите использовать `Math.max()` с оператором `...`, можно найти максимальное число вручную с помощью цикла:
```javascript
function getMaxNumber(arr) {
    let max = arr[0];  // Начинаем с первого элемента массива
    for (let i = 1; i < arr.length; i++) {
        if (arr[i] > max) {
            max = arr[i];  // Обновляем max, если текущий элемент больше
        }
    }
    return max;
}
```
Этот способ также работает, но он немного длиннее и менее элегантен по сравнению с использованием `Math.max()`.
Пример использования:
```javascript
console.log(getMaxNumber([1, 2, 3, 4, 5]));  // 5
console.log(getMaxNumber([-10, -5, 0, 10])); // 10
```
Этот подход тоже вернет правильный результат, но для большинства случаев метод с `Math.max()` более предпочтителен из-за его краткости и понятности.
---------------------------------------------------------------------------------------------   
