---------------------------------------------------------------------------------------------
30
⋙ ❍ В каком порядке выведется console.log()?
---
setTimeout(function timeout() {
    console.log('Таймаут');
}, 0);
let p = new Promise(function(resolve, reject) {
    console.log('Создание промиса');
    resolve();
});
p.then(function(){
    console.log('Обработка промиса');
});
console.log('Конец скрипта');
1
2
3
4
5
6
7
8
9
10
11
12
13
14
setTimeout(function timeout() {
    console.log('Таймаут');
}, 0);
let p = new Promise(function(resolve, reject) {
    console.log('Создание промиса');
    resolve();
});
p.then(function(){
    console.log('Обработка промиса');
});
console.log('Конец скрипта');
Чтобы определить порядок вывода `console.log()`, нужно учитывать асинхронность выполнения кода. Давайте разберем, в каком порядке будут выполняться операции:
1. Сначала выполняются все синхронные операции, то есть:
- Выводится 'Создание промиса'.
- Создается и резолвится промис.
- Выводится 'Конец скрипта'.
2. Затем выполняются обработчики промисов и асинхронные операции из очереди микрозадач (microtask queue):
- Обработчик промиса выводит 'Обработка промиса'.
3. В конце выполняются функции обратного вызова таймаутов (setTimeout) и асинхронные операции из очереди задач (task queue):
- Выводится 'Таймаут'.
Таким образом, порядок вывода будет следующим:
```
- Создание промиса
- Конец скрипта
- Обработка промиса
- Таймаут
```
---------------------------------------------------------------------------------------------
