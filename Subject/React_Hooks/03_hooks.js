---------------------------------------------------------------------------------------------  
‚ãô ‚ùç React Hooks (useState, useEffect, useMemo –∏ –¥—Ä—É–≥–∏—Ö):
---
3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ `useMemo` –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ç—è–∂—ë–ª—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è, –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç `useMemo` –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.
–ü—Ä–∏–º–µ—Ä:
```javascript
import { useMemo, useState } from 'react';

function FibonacciCalculator() {
  const [number, setNumber] = useState(0);

  const fib = useMemo(() => {
    const calculateFib = (n) => (n <= 1 ? n : calculateFib(n - 1) + calculateFib(n - 2));
    return calculateFib(number);
  }, [number]);

  return (
    <div>
      <input
        type="number"
        value={number}
        onChange={(e) => setNumber(Number(e.target.value))}
      />
      <p>Fibonacci: {fib}</p>
    </div>
  );
}
```
üéØ –†–µ—à–µ–Ω–∏–µ:
- `useMemo` –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –º–µ–º–æ–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π. –†–µ—Å—á–∏—Ç–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ `number`, —á—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ —Ç—è–∂—ë–ª—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Ä–µ–Ω–¥–µ—Ä–µ.
---------------------------------------------------------------------------------------------  
