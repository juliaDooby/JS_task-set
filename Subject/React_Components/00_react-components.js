---------------------------------------------------------------------------------------------  
‚ãô ‚ùç React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
---
0. –í–æ—Ç –ø–æ–¥—Ä–æ–±–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ To-Do List –Ω–∞ Vanilla JavaScript:
‚åõ –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:
1. –°–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á.
2. –†–µ–∞–ª–∏–∑—É–π—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á.
3. –ü–æ–∑–≤–æ–ª—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–¥–∞–ª—è—Ç—å –∑–∞–¥–∞—á–∏.
4. –ü–æ–∑–≤–æ–ª—å—Ç–µ –æ—Ç–º–µ—á–∞—Ç—å –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ.
---
üéØ –†–µ—à–µ–Ω–∏–µ:
1. HTML-—Ä–∞–∑–º–µ—Ç–∫–∞
```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Vanilla JS To-Do List</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
      background-color: #f4f4f4;
    }

    h1 {
      color: #333;
    }

    .todo-container {
      max-width: 400px;
      margin: 0 auto;
    }

    .input-container {
      display: flex;
      margin-bottom: 20px;
    }

    input {
      flex: 1;
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 5px;
    }

    button {
      margin-left: 10px;
      padding: 10px;
      background-color: #007bff;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }

    button:hover {
      background-color: #0056b3;
    }

    ul {
      list-style: none;
      padding: 0;
    }

    li {
      display: flex;
      justify-content: space-between;
      align-items: center;
      background-color: white;
      padding: 10px;
      border-radius: 5px;
      margin-bottom: 10px;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    li.completed span {
      text-decoration: line-through;
      color: gray;
    }

    .delete-btn {
      background-color: #ff4d4d;
      color: white;
      border: none;
      border-radius: 3px;
      cursor: pointer;
      padding: 5px 10px;
    }

    .delete-btn:hover {
      background-color: #ff1a1a;
    }
  </style>
</head>
<body>
  <div class="todo-container">
    <h1>To-Do List</h1>
    <div class="input-container">
      <input type="text" id="taskInput" placeholder="Enter a new task">
      <button id="addTaskBtn">Add</button>
    </div>
    <ul id="taskList"></ul>
  </div>

  <script src="script.js"></script>
</body>
</html>
```
---
2. JavaScript
```javascript
// –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ DOM
const taskInput = document.getElementById("taskInput");
const addTaskBtn = document.getElementById("addTaskBtn");
const taskList = document.getElementById("taskList");

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
function addTask() {
  const taskText = taskInput.value.trim(); // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
  if (taskText === "") {
    alert("Task cannot be empty!");
    return;
  }

  // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
  const li = document.createElement("li");
  const span = document.createElement("span");
  span.textContent = taskText;

  // –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
  span.addEventListener("click", () => {
    li.classList.toggle("completed");
  });

  // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
  const deleteBtn = document.createElement("button");
  deleteBtn.textContent = "Delete";
  deleteBtn.className = "delete-btn";

  // –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
  deleteBtn.addEventListener("click", () => {
    taskList.removeChild(li);
  });

  // –°–æ–±–∏—Ä–∞–µ–º –∑–∞–¥–∞—á—É
  li.appendChild(span);
  li.appendChild(deleteBtn);

  // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
  taskList.appendChild(li);

  // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
  taskInput.value = "";
}

// –°–æ–±—ã—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
addTaskBtn.addEventListener("click", addTask);

// –°–æ–±—ã—Ç–∏–µ –Ω–∞ –∫–ª–∞–≤–∏—à—É Enter
taskInput.addEventListener("keypress", (event) => {
  if (event.key === "Enter") {
    addTask();
  }
});
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∫–æ–¥–∞:
1. HTML:
   - –ü–æ–ª–µ `<input>` –¥–ª—è –≤–≤–æ–¥–∞ –∑–∞–¥–∞—á–∏ –∏ –∫–Ω–æ–ø–∫–∞ `<button>` –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.
   - `<ul>` –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
2. CSS:
   - –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞ (`<li>`) –∏ –∫–Ω–æ–ø–æ–∫ (`Add`, `Delete`).
   - –ö–ª–∞—Å—Å `.completed` –∑–∞–¥–∞—ë—Ç –∑–∞—á—ë—Ä–∫–Ω—É—Ç—ã–π —Å—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.
3. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:
   - –ü–æ–ª–µ –≤–≤–æ–¥–∞ –æ—á–∏—â–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:
     ```javascript
     taskInput.value = "";
     ```
   - –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É:
     ```javascript
     if (taskText === "") {
       alert("Task cannot be empty!");
       return;
     }
     ```
4. –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:
   - –ö–Ω–æ–ø–∫–∞ "Delete" —É–¥–∞–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç `<li>`:
     ```javascript
     deleteBtn.addEventListener("click", () => {
       taskList.removeChild(li);
     });
     ```
5. –û—Ç–º–µ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:
   - –ö–ª–∏–∫ –ø–æ —Ç–µ–∫—Å—Ç—É –∑–∞–¥–∞—á–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç/—É–¥–∞–ª—è–µ—Ç –∫–ª–∞—Å—Å `completed`, —á—Ç–æ–±—ã –∑–∞—á–µ—Ä–∫–Ω—É—Ç—å —Ç–µ–∫—Å—Ç:
     ```javascript
     span.addEventListener("click", () => {
       li.classList.toggle("completed");
     });
     ```
6. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à–∏ `Enter`:
   - –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ `Enter` –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è:
     ```javascript
     taskInput.addEventListener("keypress", (event) => {
       if (event.key === "Enter") {
         addTask();
       }
     });
     ```
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è
1. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ `localStorage`
–î–æ–±–∞–≤—å—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á, —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ –∏—Å—á–µ–∑–∞–ª–∏ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:
```javascript
function saveTasks() {
  const tasks = Array.from(taskList.children).map((li) => ({
    text: li.querySelector("span").textContent,
    completed: li.classList.contains("completed"),
  }));
  localStorage.setItem("tasks", JSON.stringify(tasks));
}

function loadTasks() {
  const tasks = JSON.parse(localStorage.getItem("tasks")) || [];
  tasks.forEach((task) => {
    const li = document.createElement("li");
    const span = document.createElement("span");
    span.textContent = task.text;

    if (task.completed) li.classList.add("completed");

    span.addEventListener("click", () => {
      li.classList.toggle("completed");
      saveTasks();
    });

    const deleteBtn = document.createElement("button");
    deleteBtn.textContent = "Delete";
    deleteBtn.className = "delete-btn";

    deleteBtn.addEventListener("click", () => {
      taskList.removeChild(li);
      saveTasks();
    });

    li.appendChild(span);
    li.appendChild(deleteBtn);
    taskList.appendChild(li);
  });
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener("load", loadTasks);
// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
taskList.addEventListener("DOMSubtreeModified", saveTasks);
```
---
–ó–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞:
1. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ HTML-–∫–æ–¥ –≤ —Ñ–∞–π–ª `index.html`.
2. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ JavaScript-–∫–æ–¥ –≤ —Ñ–∞–π–ª `script.js`.
3. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª `index.html` –≤ –±—Ä–∞—É–∑–µ—Ä–µ.
---------------------------------------------------------------------------------------------  








 


