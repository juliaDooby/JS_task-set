---------------------------------------------------------------------------------------------  
⋙ ❍ Массивы:
---
4. Использование метода `sort` (не оптимальный способ)
Можно отсортировать массив, а затем взять первый и последний элементы для нахождения минимального и максимального значений. Однако этот метод имеет худшую производительность, так как требует сортировки.
Код:
```javascript
const numbers = [10, 5, 8, 20, 1, -5];

const sortedNumbers = [...numbers].sort((a, b) => a - b);

const min = sortedNumbers[0];
const max = sortedNumbers[sortedNumbers.length - 1];

console.log("Максимум:", max); // 20
console.log("Минимум:", min); // -5
```
Объяснение:
- Мы создаём копию массива (чтобы не изменять оригинал) и сортируем его по возрастанию.
- После сортировки первый элемент массива — минимальный, а последний — максимальный.
Сложность:
- Временная сложность: \( O(n \log n) \) из-за сортировки массива.
- Пространственная сложность: \( O(n) \), так как мы создаём новый массив.
Резюме
| Способ                           | Временная сложность | Пространственная сложность | Примечание                              |
|----------------------------------|---------------------|----------------------------|----------------------------------------|
| Цикл `for`                   | \( O(n) \)          | \( O(1) \)                 | Простой и эффективный способ.         |
| `reduce`                     | \( O(n) \)          | \( O(1) \)                 | Функциональный подход.                 |
| Цикл `for...of`              | \( O(n) \)          | \( O(1) \)                 | Очень читаемый и современный подход.  |
| Сортировка                   | \( O(n \log n) \)   | \( O(n) \)                 | Не самый оптимальный метод.           |
Рекомендации
- Используйте цикл `for`, `for...of` или `reduce` для наилучшей производительности (все эти методы имеют сложность \( O(n) \)).
- Сортировка подходит только для случаев, когда нужно отсортировать весь массив или когда сортировка — это часть задачи.
---------------------------------------------------------------------------------------------  
