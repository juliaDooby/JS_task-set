---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –ú–∞—Å—Å–∏–≤—ã:
---
1. –ü–æ–∏—Å–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–π—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –≤ –º–∞—Å—Å–∏–≤–µ.
üéØ –†–µ—à–µ–Ω–∏–µ:
1.1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ `Math.max()` –∏ `spread`
```javascript
function findMax(arr) {
    return Math.max(...arr);
}

console.log(findMax([3, 5, 9, 1, 6])); // 9
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä `...` (spread), —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ `Math.max()`.
- –†–∞–±–æ—Ç–∞–µ—Ç –∑–∞ O(N).
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –ú–∞—Å—Å–∏–≤—ã:
---
1.2. –¶–∏–∫–ª `for`
```javascript
function findMax(arr) {
    let max = arr[0];
    for (let num of arr) {
        if (num > max) max = num;
    }
    return max;
}

console.log(findMax([3, 5, 9, 1, 6])); // 9
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º `max` –ø–µ—Ä–≤—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º –∏ –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –º–∞—Å—Å–∏–≤—É.
- –†–∞–±–æ—Ç–∞–µ—Ç –∑–∞ O(N).
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –ú–∞—Å—Å–∏–≤—ã:
---
1.3. –ú–µ—Ç–æ–¥ `reduce()`
```javascript
function findMax(arr) {
    return arr.reduce((max, num) => (num > max ? num : max), arr[0]);
}

console.log(findMax([3, 5, 9, 1, 6])); // 9
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- `reduce()` —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
- –†–∞–±–æ—Ç–∞–µ—Ç –∑–∞ O(N).
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –ú–∞—Å—Å–∏–≤—ã:
---
1.4. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –≤—ã–±–æ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
```javascript
function findMax(arr) {
    return arr.sort((a, b) => a - b)[arr.length - 1];
}

console.log(findMax([3, 5, 9, 1, 6])); // 9
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤, –≤—ã–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç.
- –†–∞–±–æ—Ç–∞–µ—Ç –∑–∞ O(N log N), —á—Ç–æ –º–µ–Ω–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ.
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –ú–∞—Å—Å–∏–≤—ã:
---
1.5. –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥
```javascript
function findMax(arr) {
    if (arr.length === 1) return arr[0];
    let restMax = findMax(arr.slice(1));
    return arr[0] > restMax ? arr[0] : restMax;
}

console.log(findMax([3, 5, 9, 1, 6])); // 9
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –†–∞–∑–±–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤ –∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º.
- –†–∞–±–æ—Ç–∞–µ—Ç –∑–∞ O(N) –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ O(N) –ø–æ –ø–∞–º—è—Ç–∏.
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –ú–∞—Å—Å–∏–≤—ã:
---
2. –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ –ø—Ä–æ—Å—Ç—ã–º
‚åõ –ó–∞–¥–∞—á–∞: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ `n` –ø—Ä–æ—Å—Ç—ã–º.
üéØ –†–µ—à–µ–Ω–∏–µ:
2.1. –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö —á–∏—Å–µ–ª –æ—Ç 2 –¥–æ `n-1`
```javascript
function isPrime(n) {
    if (n < 2) return false;
    for (let i = 2; i < n; i++) {
        if (n % i === 0) return false;
    }
    return true;
}

console.log(isPrime(7)); // true
console.log(isPrime(10)); // false
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ü—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞ –¥–µ–ª—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ 1 –∏ —Å–µ–±—è.
- O(N) ‚Äî –º–µ–¥–ª–µ–Ω–Ω–æ –¥–ª—è –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª.
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –ú–∞—Å—Å–∏–≤—ã:
---
2.2. –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–µ–±–æ—Ä –¥–æ `sqrt(n)`
```javascript
function isPrime(n) {
    if (n < 2) return false;
    for (let i = 2; i * i <= n; i++) {
        if (n % i === 0) return false;
    }
    return true;
}

console.log(isPrime(7)); // true
console.log(isPrime(10)); // false
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–ª–∏—Ç–µ–ª–∏ —Ç–æ–ª—å–∫–æ –¥–æ `sqrt(n)`.
- –†–∞–±–æ—Ç–∞–µ—Ç –∑–∞ O(‚àöN).
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –ú–∞—Å—Å–∏–≤—ã:
---
2.3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ—Ç–∞ –≠—Ä–∞—Ç–æ—Å—Ñ–µ–Ω–∞ (–¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —á–∏—Å–µ–ª)
```javascript
function sieve(n) {
    let primes = Array(n + 1).fill(true);
    primes[0] = primes[1] = false;

    for (let i = 2; i * i <= n; i++) {
        if (primes[i]) {
            for (let j = i * i; j <= n; j += i) {
                primes[j] = false;
            }
        }
    }

    return primes.map((isPrime, idx) => isPrime ? idx : -1).filter(x => x !== -1);
}

console.log(sieve(20)); // [2, 3, 5, 7, 11, 13, 17, 19]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª –¥–æ `n`.
- O(N log log N) ‚Äî –æ—á–µ–Ω—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ.
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –ú–∞—Å—Å–∏–≤—ã:
---
2.4. –ß–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ—Å—Ç—ã–º–∏ (–∫—Ä–æ–º–µ 2)
```javascript
function isPrime(n) {
    if (n < 2) return false;
    if (n === 2) return true;
    if (n % 2 === 0) return false;

    for (let i = 3; i * i <= n; i += 2) {
        if (n % i === 0) return false;
    }
    return true;
}

console.log(isPrime(7)); // true
console.log(isPrime(10)); // false
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ò—Å–∫–ª—é—á–∞–µ–º —á–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞, –∫—Ä–æ–º–µ 2.
- O(‚àöN) ‚Äî –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º –Ω–∞–∏–≤–Ω—ã–π O(N).
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –ú–∞—Å—Å–∏–≤—ã:
---
2.5. –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞
```javascript
let cache = {};

function isPrime(n) {
    if (n in cache) return cache[n];

    if (n < 2) return (cache[n] = false);
    if (n === 2) return (cache[n] = true);
    if (n % 2 === 0) return (cache[n] = false);

    for (let i = 3; i * i <= n; i += 2) {
        if (n % i === 0) return (cache[n] = false);
    }

    return (cache[n] = true);
}

console.log(isPrime(7)); // true
console.log(isPrime(10)); // false
console.log(isPrime(7)); // true (–±—ã—Å—Ç—Ä–µ–µ –∑–∞ —Å—á–µ—Ç –∫–µ—à–∞)
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ä–µ–∫—Ç `cache` –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
- –ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π.
---
–í—ã–≤–æ–¥
–ú—ã —Ä–∞–∑–æ–±—Ä–∞–ª–∏ 2 –∑–∞–¥–∞—á–∏ —Å 5 —Ä–∞–∑–Ω—ã–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏:
1. –ü–æ–∏—Å–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∏—Å–ª–∞ –Ω–∞ –ø—Ä–æ—Å—Ç–æ—Ç—É
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –ú–∞—Å—Å–∏–≤—ã:
---
3. –ü–µ—Ä–µ–≤–æ—Ä–æ—Ç —Å—Ç—Ä–æ–∫–∏
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É.
üéØ –†–µ—à–µ–Ω–∏–µ:
3.1. –ú–µ—Ç–æ–¥ `split()`, `reverse()` –∏ `join()`
```javascript
function reverseString(str) {
    return str.split("").reverse().join("");
}

console.log(reverseString("hello")); // "olleh"
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤ (`split("")`), –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º (`reverse()`), –æ–±—ä–µ–¥–∏–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ (`join("")`).
- O(N).
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –ú–∞—Å—Å–∏–≤—ã:
---
3.2. –¶–∏–∫–ª `for`
```javascript
function reverseString(str) {
    let reversed = "";
    for (let i = str.length - 1; i >= 0; i--) {
        reversed += str[i];
    }
    return reversed;
}

console.log(reverseString("hello")); // "olleh"
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã –≤ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
- O(N).
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –ú–∞—Å—Å–∏–≤—ã:
---
3.3. –†–µ–∫—É—Ä—Å–∏—è
```javascript
function reverseString(str) {
    return str.length <= 1 ? str : reverseString(str.slice(1)) + str[0];
}

console.log(reverseString("hello")); // "olleh"
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –µ–≥–æ –≤ –∫–æ–Ω–µ—Ü.
- O(N), –Ω–æ O(N) –ø–∞–º—è—Ç–∏ –∏–∑-–∑–∞ —Ä–µ–∫—É—Ä—Å–∏–∏.
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –ú–∞—Å—Å–∏–≤—ã:
---
3.4. –ú–µ—Ç–æ–¥ `reduce()`
```javascript
function reverseString(str) {
    return str.split("").reduce((rev, char) => char + rev, "");
}

console.log(reverseString("hello")); // "olleh"
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –º–∞—Å—Å–∏–≤—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã –ø–µ—Ä–µ–¥ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–æ–π.
- O(N).
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –ú–∞—Å—Å–∏–≤—ã:
---
3.5. –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è —Å `map()`
```javascript
function reverseString(str) {
    return [...str].map((_, i, arr) => arr[arr.length - 1 - i]).join("");
}

console.log(reverseString("hello")); // "olleh"
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ò—Å–ø–æ–ª—å–∑—É–µ–º `map()` –¥–ª—è –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
- O(N).
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –ú–∞—Å—Å–∏–≤—ã:
---
4. –§–∏–±–æ–Ω–∞—á—á–∏
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–π—Ç–∏ `n`-–µ —á–∏—Å–ª–æ –§–∏–±–æ–Ω–∞—á—á–∏.
üéØ –†–µ—à–µ–Ω–∏–µ:
4.1. –†–µ–∫—É—Ä—Å–∏—è
```javascript
function fibonacci(n) {
    if (n <= 1) return n;
    return fibonacci(n - 1) + fibonacci(n - 2);
}

console.log(fibonacci(6)); // 8
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ü—Ä–æ—Å—Ç–æ–π, –Ω–æ O(2^N) ‚Äî –º–µ–¥–ª–µ–Ω–Ω—ã–π.
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –ú–∞—Å—Å–∏–≤—ã:
---
4.2. –ú–µ–º–æ–∏–∑–∞—Ü–∏—è
```javascript
let memo = {};

function fibonacci(n) {
    if (n in memo) return memo[n];
    if (n <= 1) return n;
    return memo[n] = fibonacci(n - 1) + fibonacci(n - 2);
}

console.log(fibonacci(6)); // 8
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ò—Å–ø–æ–ª—å–∑—É–µ–º `memo` –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è.
- O(N).
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –ú–∞—Å—Å–∏–≤—ã:
---
4.3. –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω—ã–π `for`
```javascript
function fibonacci(n) {
    let a = 0, b = 1;
    for (let i = 2; i <= n; i++) {
        [a, b] = [b, a + b];
    }
    return b;
}

console.log(fibonacci(6)); // 8
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- O(N), –Ω–æ –±–µ–∑ —Ä–µ–∫—É—Ä—Å–∏–∏.
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –ú–∞—Å—Å–∏–≤—ã:
---
4.4. –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω—ã–π `while`
```javascript
function fibonacci(n) {
    let a = 0, b = 1, i = 2;
    while (i <= n) {
        [a, b] = [b, a + b];
        i++;
    }
    return b;
}

console.log(fibonacci(6)); // 8
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –†–∞–±–æ—Ç–∞–µ—Ç –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ `for`.
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –ú–∞—Å—Å–∏–≤—ã:
---
4.5. –§–æ—Ä–º—É–ª–∞ –ë–∏–Ω–µ
```javascript
function fibonacci(n) {
    const sqrt5 = Math.sqrt(5);
    return Math.round((Math.pow(1 + sqrt5, n) - Math.pow(1 - sqrt5, n)) / (Math.pow(2, n) * sqrt5));
}

console.log(fibonacci(6)); // 8
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –í—ã—á–∏—Å–ª—è–µ—Ç –∑–∞ O(1), –Ω–æ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—à–∏–±–∫–∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è.
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –ú–∞—Å—Å–∏–≤—ã:
---
5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–∞
‚åõ –ó–∞–¥–∞—á–∞: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º.
üéØ –†–µ—à–µ–Ω–∏–µ:
5.1. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å `reverse()`
```javascript
function isPalindrome(str) {
    return str === str.split("").reverse().join("");
}

console.log(isPalindrome("racecar")); // true
console.log(isPalindrome("hello")); // false
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º.
- O(N).
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –ú–∞—Å—Å–∏–≤—ã:
---
5.2. –î–≤–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è
```javascript
function isPalindrome(str) {
    let left = 0, right = str.length - 1;
    while (left < right) {
        if (str[left] !== str[right]) return false;
        left++;
        right--;
    }
    return true;
}

console.log(isPalindrome("racecar")); // true
console.log(isPalindrome("hello")); // false
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –î–≤–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è –¥–≤–∏–≥–∞—é—Ç—Å—è –Ω–∞–≤—Å—Ç—Ä–µ—á—É –¥—Ä—É–≥ –¥—Ä—É–≥—É.
- O(N).
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –ú–∞—Å—Å–∏–≤—ã:
---
5.3. –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
```javascript
function isPalindrome(str) {
    if (str.length <= 1) return true;
    if (str[0] !== str[str.length - 1]) return false;
    return isPalindrome(str.slice(1, -1));
}

console.log(isPalindrome("racecar")); // true
console.log(isPalindrome("hello")); // false
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª—ã.
- O(N), –Ω–æ O(N) –ø–∞–º—è—Ç–∏.
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –ú–∞—Å—Å–∏–≤—ã:
---
5.4. `every()`
```javascript
function isPalindrome(str) {
    return [...str].every((char, i) => char === str[str.length - 1 - i]);
}

console.log(isPalindrome("racecar")); // true
console.log(isPalindrome("hello")); // false
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª, —Å—Ä–∞–≤–Ω–∏–≤–∞—è —Å –∑–µ—Ä–∫–∞–ª—å–Ω—ã–º.
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –ú–∞—Å—Å–∏–≤—ã:
---
5.5. –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–±–µ–ª—ã –∏ –∑–Ω–∞–∫–∏)
```javascript
function isPalindrome(str) {
    str = str.toLowerCase().replace(/[^a-z0-9]/g, "");
    return str === str.split("").reverse().join("");
}

console.log(isPalindrome("A man, a plan, a canal, Panama")); // true
console.log(isPalindrome("hello")); // false
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫–∏ –∏ –ø—Ä–æ–±–µ–ª—ã, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—É—é —Å—Ç—Ä–æ–∫—É.
---
–í—ã–≤–æ–¥
–ú—ã —Ä–∞–∑–æ–±—Ä–∞–ª–∏ 5 —Ä–µ—à–µ–Ω–∏–π –¥–ª—è 5 –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á:
1. –ü–µ—Ä–µ–≤–æ—Ä–æ—Ç —Å—Ç—Ä–æ–∫–∏
2. –ß–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏
3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–∞
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –ú–∞—Å—Å–∏–≤—ã:
---
6. –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏–∑ –º–∞—Å—Å–∏–≤–∞
‚åõ –ó–∞–¥–∞—á–∞: –£–¥–∞–ª–∏—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –º–∞—Å—Å–∏–≤–µ –∏ –≤–µ—Ä–Ω—É—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.
üéØ –†–µ—à–µ–Ω–∏–µ:
6.1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ `Set`
```javascript
function removeDuplicates(arr) {
    return [...new Set(arr)];
}

console.log(removeDuplicates([1, 2, 2, 3, 4, 4, 5])); // [1, 2, 3, 4, 5]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- `Set` —Ö—Ä–∞–Ω–∏—Ç —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.
- O(N).
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –ú–∞—Å—Å–∏–≤—ã:
---
6.2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ `filter()` –∏ `indexOf()`
```javascript
function removeDuplicates(arr) {
    return arr.filter((item, index) => arr.indexOf(item) === index);
}

console.log(removeDuplicates([1, 2, 2, 3, 4, 4, 5])); // [1, 2, 3, 4, 5]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- `indexOf()` –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤–ø–µ—Ä–≤—ã–µ.
- O(N¬≤) (–º–µ–¥–ª–µ–Ω–Ω–æ –¥–ª—è –±–æ–ª—å—à–∏—Ö –º–∞—Å—Å–∏–≤–æ–≤).
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –ú–∞—Å—Å–∏–≤—ã:
---
6.3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ `reduce()`
```javascript
function removeDuplicates(arr) {
    return arr.reduce((unique, item) => {
        if (!unique.includes(item)) unique.push(item);
        return unique;
    }, []);
}

console.log(removeDuplicates([1, 2, 2, 3, 4, 4, 5])); // [1, 2, 3, 4, 5]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –≤ –Ω–æ–≤–æ–º –º–∞—Å—Å–∏–≤–µ.
- O(N¬≤) (–∏–∑-–∑–∞ `includes()`).
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –ú–∞—Å—Å–∏–≤—ã:
---
6.4. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ `Map`
```javascript
function removeDuplicates(arr) {
    let map = new Map();
    arr.forEach(item => map.set(item, true));
    return [...map.keys()];
}

console.log(removeDuplicates([1, 2, 2, 3, 4, 4, 5])); // [1, 2, 3, 4, 5]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- `Map` —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏.
- O(N).
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –ú–∞—Å—Å–∏–≤—ã:
---
6.5. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ `Object`
```javascript
function removeDuplicates(arr) {
    let obj = {};
    arr.forEach(item => obj[item] = true);
    return Object.keys(obj).map(Number);
}

console.log(removeDuplicates([1, 2, 2, 3, 4, 4, 5])); // [1, 2, 3, 4, 5]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ò—Å–ø–æ–ª—å–∑—É–µ–º `Object`, —á—Ç–æ–±—ã —Ö—Ä–∞–Ω–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.
- O(N).
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –ú–∞—Å—Å–∏–≤—ã:
---
7. –ü–æ–∏—Å–∫ –≤—Ç–æ—Ä–æ–≥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–π—Ç–∏ –≤—Ç–æ—Ä–æ–π –ø–æ –≤–µ–ª–∏—á–∏–Ω–µ —ç–ª–µ–º–µ–Ω—Ç –≤ –º–∞—Å—Å–∏–≤–µ.
üéØ –†–µ—à–µ–Ω–∏–µ:
7.1. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –≤—ã–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞
```javascript
function secondMax(arr) {
    let unique = [...new Set(arr)];
    unique.sort((a, b) => b - a);
    return unique[1] ?? null;
}

console.log(secondMax([10, 20, 4, 45, 99, 99])); // 45
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, —Å–æ—Ä—Ç–∏—Ä—É–µ–º, –≤—ã–±–∏—Ä–∞–µ–º –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç.
- O(N log N).
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –ú–∞—Å—Å–∏–≤—ã:
---
7.2. –î–≤–∞ –ø—Ä–æ—Ö–æ–¥–∞ (–ø–æ–∏—Å–∫ –º–∞–∫—Å, –∑–∞—Ç–µ–º –≤—Ç–æ—Ä–æ–≥–æ –º–∞–∫—Å)
```javascript
function secondMax(arr) {
    let max = Math.max(...arr);
    let filtered = arr.filter(num => num !== max);
    return Math.max(...filtered);
}

console.log(secondMax([10, 20, 4, 45, 99, 99])); // 45
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º—É–º, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –µ–≥–æ, –∏—â–µ–º –º–∞–∫—Å–∏–º—É–º —Å–Ω–æ–≤–∞.
- O(N).
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –ú–∞—Å—Å–∏–≤—ã:
---
7.3. –û–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥ (–¥–≤–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è)
```javascript
function secondMax(arr) {
    let max = -Infinity, secondMax = -Infinity;
    for (let num of arr) {
        if (num > max) {
            secondMax = max;
            max = num;
        } else if (num > secondMax && num !== max) {
            secondMax = num;
        }
    }
    return secondMax === -Infinity ? null : secondMax;
}

console.log(secondMax([10, 20, 4, 45, 99, 99])); // 45
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –î–≤–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è (`max`, `secondMax`).
- O(N).
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –ú–∞—Å—Å–∏–≤—ã:
---
7.4. `reduce()`
```javascript
function secondMax(arr) {
    let max = Math.max(...arr);
    return arr.reduce((secondMax, num) => (num !== max && num > secondMax ? num : secondMax), -Infinity);
}

console.log(secondMax([10, 20, 4, 45, 99, 99])); // 45
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- O(N), –Ω–æ –Ω–µ —Ç–∞–∫–æ–π —á–∏—Ç–∞–µ–º—ã–π, –∫–∞–∫ —Å `for`.
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –ú–∞—Å—Å–∏–≤—ã:
---
7.5. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ `Set` –∏ `Math.max()`
```javascript
function secondMax(arr) {
    let unique = [...new Set(arr)];
    unique.splice(unique.indexOf(Math.max(...unique)), 1);
    return Math.max(...unique);
}

console.log(secondMax([10, 20, 4, 45, 99, 99])); // 45
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, —É–¥–∞–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –∏—â–µ–º –Ω–æ–≤—ã–π –º–∞–∫—Å–∏–º—É–º.
- O(N).
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –ú–∞—Å—Å–∏–≤—ã:
---
8. –ü–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª–æ–≤ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏
‚åõ –ó–∞–¥–∞—á–∞: –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ.
üéØ –†–µ—à–µ–Ω–∏–µ:
8.1. `split()`, `reverse()` –∏ `join()`
```javascript
function reverseWords(str) {
    return str.split(" ").reverse().join(" ");
}

console.log(reverseWords("hello world!")); // "world! hello"
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤ —Å–ª–æ–≤, –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º, —Å–æ–µ–¥–∏–Ω—è–µ–º.
- O(N).
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –ú–∞—Å—Å–∏–≤—ã:
---
8.2. `reduce()`
```javascript
function reverseWords(str) {
    return str.split(" ").reduce((rev, word) => word + " " + rev, "").trim();
}

console.log(reverseWords("hello world!")); // "world! hello"
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- `reduce()` –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–ª–æ–≤–∞ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
- O(N).
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –ú–∞—Å—Å–∏–≤—ã:
---
8.3. –¶–∏–∫–ª `for`
```javascript
function reverseWords(str) {
    let words = str.split(" ");
    let reversed = [];
    for (let i = words.length - 1; i >= 0; i--) {
        reversed.push(words[i]);
    }
    return reversed.join(" ");
}

console.log(reverseWords("hello world!")); // "world! hello"
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –º–∞—Å—Å–∏–≤—É —Å–ª–æ–≤ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
- O(N).
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –ú–∞—Å—Å–∏–≤—ã:
---
8.4. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–µ–∫–∞ (`push()` –∏ `pop()`)
```javascript
function reverseWords(str) {
    let words = str.split(" ");
    let stack = [];
    for (let word of words) stack.push(word);
    return stack.reverse().join(" ");
}

console.log(reverseWords("hello world!")); // "world! hello"
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ó–∞–ø–æ–ª–Ω—è–µ–º –º–∞—Å—Å–∏–≤ (`push()`), –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º (`reverse()`).
- O(N).
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –ú–∞—Å—Å–∏–≤—ã:
---
8.5. –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
```javascript
function reverseWords(str) {
    let words = str.split(" ");
    return words.length === 1 ? words[0] : reverseWords(words.slice(1).join(" ")) + " " + words[0];
}

console.log(reverseWords("hello world!")); // "world! hello"
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏ –≤—ã–∑—ã–≤–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏—é.
- O(N).
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç ‚åõ –ó–∞–¥–∞—á–∞: –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –æ—Ç—Å–æ—Ä—Ç. –º–∞—Å—Å—Å–∏–≤—ã:
---
–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤ –≤ JavaScript –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å –ø–æ–º–æ—â—å—é —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤. –¢–∞–∫ –∫–∞–∫ –æ–±–∞ –º–∞—Å—Å–∏–≤–∞ —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã, —Å–∞–º—ã–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ —Å–ª–∏—è–Ω–∏—è –¥–≤—É—Ö –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∑–∞ O(n) (–≥–¥–µ n ‚Äî —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –æ–±–æ–∏—Ö –º–∞—Å—Å–∏–≤–∞—Ö).
–ê–ª–≥–æ—Ä–∏—Ç–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤:
1. –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è –ø–æ –¥–≤—É–º –º–∞—Å—Å–∏–≤–∞–º.
2. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–µ–∫—É—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π –≤ –æ–±–æ–∏—Ö –º–∞—Å—Å–∏–≤–∞—Ö.
3. –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∏–º–µ–Ω—å—à–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –∏ —Å–¥–≤–∏–≥–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —É–∫–∞–∑–∞—Ç–µ–ª—å.
4. –ï—Å–ª–∏ –æ–¥–∏–Ω –º–∞—Å—Å–∏–≤ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è, –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –¥—Ä—É–≥–æ–≥–æ –º–∞—Å—Å–∏–≤–∞.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function mergeSortedArrays(arr1, arr2) {
  let result = [];
  let i = 0; // –£–∫–∞–∑–∞—Ç–µ–ª—å –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
  let j = 0; // –£–∫–∞–∑–∞—Ç–µ–ª—å –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –º–∞—Å—Å–∏–≤–∞

  // –ü–æ–∫–∞ –æ–±–∞ –º–∞—Å—Å–∏–≤–∞ –Ω–µ –ø—É—Å—Ç—ã
  while (i < arr1.length && j < arr2.length) {
    if (arr1[i] < arr2[j]) {
      result.push(arr1[i]);
      i++;
    } else {
      result.push(arr2[j]);
      j++;
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –º–∞—Å—Å–∏–≤–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
  while (i < arr1.length) {
    result.push(arr1[i]);
    i++;
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ –º–∞—Å—Å–∏–≤–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
  while (j < arr2.length) {
    result.push(arr2[j]);
    j++;
  }

  return result;
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
const arr1 = [1, 3, 5, 7];
const arr2 = [2, 4, 6, 8];

const mergedArray = mergeSortedArrays(arr1, arr2);
console.log(mergedArray); // [1, 2, 3, 4, 5, 6, 7, 8]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
1. –î–≤–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è:
   - `i` –∏ `j` ‚Äî —ç—Ç–æ —É–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è –¥–≤—É—Ö –º–∞—Å—Å–∏–≤–æ–≤ `arr1` –∏ `arr2`.
   - –ú—ã —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ –ø–æ–∑–∏—Ü–∏—è—Ö `i` –∏ `j` –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∏–º–µ–Ω—å—à–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤.
2. –¶–∏–∫–ª –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è:
   - –ü–æ–∫–∞ –æ–±–∞ –º–∞—Å—Å–∏–≤–∞ –Ω–µ –ø—É—Å—Ç—ã, –º—ã –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∏–º–µ–Ω—å—à–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ –º–∞—Å—Å–∏–≤ `result` –∏ –¥–≤–∏–≥–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Ç–æ—Ç –º–∞—Å—Å–∏–≤, –æ—Ç–∫—É–¥–∞ –±—ã–ª –≤—ã–±—Ä–∞–Ω —ç–ª–µ–º–µ–Ω—Ç.
3. –û—Å—Ç–∞—Ç–æ—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:
   - –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞, –µ—Å–ª–∏ –æ–¥–∏–Ω –∏–∑ –º–∞—Å—Å–∏–≤–æ–≤ –µ—â—ë –Ω–µ –±—ã–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –º—ã –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –¥—Ä—É–≥–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
–ü—Ä–∏–º–µ—Ä —Å –¥—Ä—É–≥–∏–º–∏ –º–∞—Å—Å–∏–≤–∞–º–∏:
```javascript
const arr1 = [1, 4, 6, 8];
const arr2 = [2, 3, 5, 7, 9];

const mergedArray = mergeSortedArrays(arr1, arr2);
console.log(mergedArray); // [1, 2, 3, 4, 5, 6, 7, 8, 9]
```
–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ (—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º `concat()` –∏ `sort()`)
–ï—Å–ª–∏ –≤–∞–º –Ω–µ –≤–∞–∂–Ω–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–∫–æ–≥–¥–∞ –º–∞—Å—Å–∏–≤—ã –º–∞–ª–µ–Ω—å–∫–∏–µ –∏–ª–∏ –≤–∞–º –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å—Ç—Ä–æ–≥–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è), –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –¥–≤–∞ –º–∞—Å—Å–∏–≤–∞ –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö:
```javascript
function mergeAndSortArrays(arr1, arr2) {
  return [...arr1, ...arr2].sort((a, b) => a - b);
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
const arr1 = [1, 3, 5, 7];
const arr2 = [2, 4, 6, 8];

const mergedArray = mergeAndSortArrays(arr1, arr2);
console.log(mergedArray); // [1, 2, 3, 4, 5, 6, 7, 8]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –ú—ã –æ–±—ä–µ–¥–∏–Ω—è–µ–º –¥–≤–∞ –º–∞—Å—Å–∏–≤–∞ —Å –ø–æ–º–æ—â—å—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è (`...`) –∏ –∑–∞—Ç–µ–º —Å–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ `.sort()`. –û–¥–Ω–∞–∫–æ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∑–∞ O(n log n), —á—Ç–æ –º–µ–¥–ª–µ–Ω–Ω–µ–µ, —á–µ–º –º–µ—Ç–æ–¥ —Å–ª–∏—è–Ω–∏—è, –µ—Å–ª–∏ –º–∞—Å—Å–∏–≤—ã —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã.
–†–µ–∑—é–º–µ:
1. –ï—Å–ª–∏ –æ–±–∞ –º–∞—Å—Å–∏–≤–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã, –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ **—Å–ª–∏—è–Ω–∏—è —Å –¥–≤—É–º—è —É–∫–∞–∑–∞—Ç–µ–ª—è–º–∏**, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∑–∞ O(n).
2. –ï—Å–ª–∏ –º–∞—Å—Å–∏–≤—ã –Ω–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å `concat()` –∏ `sort()`, –Ω–æ —ç—Ç–æ –º–µ–Ω–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –¥–ª—è –±–æ–ª—å—à–∏—Ö –º–∞—Å—Å–∏–≤–æ–≤.

‚õî‚õî‚õî
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç ‚åõ –ó–∞–¥–∞—á–∞: –Ω–∞–π—Ç–∏ –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞ –≤ –º–∞—Å—Å–∏–≤–µ:
---
–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞ –≤ –º–∞—Å—Å–∏–≤–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Vanilla JavaScript, –Ω–∞–º –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ –ø—Ä–æ—Å—Ç—ã–º, –∏ –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—ë –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —á–∏—Å–µ–ª –≤ –º–∞—Å—Å–∏–≤–µ.
–ü—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ ‚Äî —ç—Ç–æ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 1, –∫–æ—Ç–æ—Ä–æ–µ –¥–µ–ª–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ 1 –∏ –Ω–∞ —Å–µ–±—è.
–ê–ª–≥–æ—Ä–∏—Ç–º:
1. –ß–∏—Å–ª–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø—Ä–æ—Å—Ç—ã–º, –µ—Å–ª–∏ –æ–Ω–æ –±–æ–ª—å—à–µ 1 –∏ –Ω–µ –∏–º–µ–µ—Ç –¥–µ–ª–∏—Ç–µ–ª–µ–π, –∫—Ä–æ–º–µ 1 –∏ —Å–∞–º–æ–≥–æ —Å–µ–±—è.
2. –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–ª–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏—Å—å –ø–æ —á–∏—Å–ª–∞–º –æ—Ç 2 –¥–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –∫–æ—Ä–Ω—è –∏–∑ –ø—Ä–æ–≤–µ—Ä—è–µ–º–æ–≥–æ —á–∏—Å–ª–∞, —Ç–∞–∫ –∫–∞–∫ –µ—Å–ª–∏ —á–∏—Å–ª–æ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ –∫–∞–∫–æ–µ-—Ç–æ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ, –µ–≥–æ –¥–µ–ª–∏—Ç–µ–ª–∏ –±—É–¥—É—Ç –Ω–∞–π–¥–µ–Ω—ã —Ä–∞–Ω—å—à–µ.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function isPrime(num) {
  if (num <= 1) return false; // –ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 1
  for (let i = 2; i <= Math.sqrt(num); i++) {
    if (num % i === 0) {
      return false; // –ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –¥–µ–ª–∏—Ç–µ–ª—å, —á–∏—Å–ª–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ–µ
    }
  }
  return true; // –ï—Å–ª–∏ –¥–µ–ª–∏—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —á–∏—Å–ª–æ –ø—Ä–æ—Å—Ç–æ–µ
}

function findPrimes(arr) {
  return arr.filter(isPrime); // –§–∏–ª—å—Ç—Ä—É–µ–º –º–∞—Å—Å–∏–≤, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞
}
// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
const numbers = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15];
const primes = findPrimes(numbers);

console.log(primes); // [2, 3, 5, 7, 11, 13]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
1. `isPrime(num)` ‚Äî —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ç–æ—Ç—ã —á–∏—Å–ª–∞. –ú—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–ª–∏—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ –Ω–∞ –¥—Ä—É–≥–∏–µ —á–∏—Å–ª–∞ –æ—Ç 2 –¥–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –∫–æ—Ä–Ω—è –∏–∑ —á–∏—Å–ª–∞. –ï—Å–ª–∏ –¥–µ–ª–∏—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, —Ç–æ —á–∏—Å–ª–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ–µ.
2. `findPrimes(arr)` ‚Äî —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞. –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –º–∞—Å—Å–∏–≤–∞ `.filter()`, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –ø–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º –∏ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö `isPrime()` –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `true`.
–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:
- –í–º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–ª–∏–º–æ—Å—Ç–∏ –Ω–∞ –≤—Å–µ —á–∏—Å–ª–∞ –¥–æ —Å–∞–º–æ–≥–æ —á–∏—Å–ª–∞, –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –¥–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –∫–æ—Ä–Ω—è. –≠—Ç–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–º–µ–Ω—å—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π, –æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª.
–ü—Ä–∏–º–µ—Ä —Å –≤—ã–≤–æ–¥–æ–º:
```javascript
const numbers = [1, 2, 3, 4, 5, 16, 17, 18, 19, 20, 23, 24];
const primes = findPrimes(numbers);
console.log(primes);  // [2, 3, 5, 17, 19, 23]
```
---------------------------------------------------------------------------------------------  
