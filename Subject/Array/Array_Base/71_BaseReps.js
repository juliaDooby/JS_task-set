---------------------------------------------------------------------------------------------  
‚ãô ‚ùç ‚åõ –ó–∞–¥–∞—á–∞: –Ω–∞–π—Ç–∏ –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞ –≤ –º–∞—Å—Å–∏–≤–µ:
---
71. –ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞ –≤ –º–∞—Å—Å–∏–≤–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Vanilla JavaScript, –Ω–∞–º –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ –ø—Ä–æ—Å—Ç—ã–º, –∏ –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—ë –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —á–∏—Å–µ–ª –≤ –º–∞—Å—Å–∏–≤–µ.
–ü—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ ‚Äî —ç—Ç–æ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 1, –∫–æ—Ç–æ—Ä–æ–µ –¥–µ–ª–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ 1 –∏ –Ω–∞ —Å–µ–±—è.
–ê–ª–≥–æ—Ä–∏—Ç–º:
1. –ß–∏—Å–ª–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø—Ä–æ—Å—Ç—ã–º, –µ—Å–ª–∏ –æ–Ω–æ –±–æ–ª—å—à–µ 1 –∏ –Ω–µ –∏–º–µ–µ—Ç –¥–µ–ª–∏—Ç–µ–ª–µ–π, –∫—Ä–æ–º–µ 1 –∏ —Å–∞–º–æ–≥–æ —Å–µ–±—è.
2. –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–ª–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏—Å—å –ø–æ —á–∏—Å–ª–∞–º –æ—Ç 2 –¥–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –∫–æ—Ä–Ω—è –∏–∑ –ø—Ä–æ–≤–µ—Ä—è–µ–º–æ–≥–æ —á–∏—Å–ª–∞, —Ç–∞–∫ –∫–∞–∫ –µ—Å–ª–∏ —á–∏—Å–ª–æ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ –∫–∞–∫–æ–µ-—Ç–æ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ, –µ–≥–æ –¥–µ–ª–∏—Ç–µ–ª–∏ –±—É–¥—É—Ç –Ω–∞–π–¥–µ–Ω—ã —Ä–∞–Ω—å—à–µ.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
function isPrime(num) {
  if (num <= 1) return false; // –ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 1
  for (let i = 2; i <= Math.sqrt(num); i++) {
    if (num % i === 0) {
      return false; // –ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –¥–µ–ª–∏—Ç–µ–ª—å, —á–∏—Å–ª–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ–µ
    }
  }
  return true; // –ï—Å–ª–∏ –¥–µ–ª–∏—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —á–∏—Å–ª–æ –ø—Ä–æ—Å—Ç–æ–µ
}

function findPrimes(arr) {
  return arr.filter(isPrime); // –§–∏–ª—å—Ç—Ä—É–µ–º –º–∞—Å—Å–∏–≤, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞
}
// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
const numbers = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15];
const primes = findPrimes(numbers);

console.log(primes); // [2, 3, 5, 7, 11, 13]
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
1. `isPrime(num)` ‚Äî —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ç–æ—Ç—ã —á–∏—Å–ª–∞. –ú—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–ª–∏—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ –Ω–∞ –¥—Ä—É–≥–∏–µ —á–∏—Å–ª–∞ –æ—Ç 2 –¥–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –∫–æ—Ä–Ω—è –∏–∑ —á–∏—Å–ª–∞. –ï—Å–ª–∏ –¥–µ–ª–∏—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, —Ç–æ —á–∏—Å–ª–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ–µ.
2. `findPrimes(arr)` ‚Äî —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞. –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –º–∞—Å—Å–∏–≤–∞ `.filter()`, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –ø–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º –∏ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö `isPrime()` –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `true`.
–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:
- –í–º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–ª–∏–º–æ—Å—Ç–∏ –Ω–∞ –≤—Å–µ —á–∏—Å–ª–∞ –¥–æ —Å–∞–º–æ–≥–æ —á–∏—Å–ª–∞, –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –¥–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –∫–æ—Ä–Ω—è. –≠—Ç–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–º–µ–Ω—å—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π, –æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª.
–ü—Ä–∏–º–µ—Ä —Å –≤—ã–≤–æ–¥–æ–º:
```javascript
const numbers = [1, 2, 3, 4, 5, 16, 17, 18, 19, 20, 23, 24];
const primes = findPrimes(numbers);
console.log(primes);  // [2, 3, 5, 17, 19, 23]
```
---------------------------------------------------------------------------------------------  
