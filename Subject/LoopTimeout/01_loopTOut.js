---------------------------------------------------------------------------------------------  
⋙ ❍ Задача на Timeout внутри цикла:
---
1. 🎯 Решение с использованием `async/await` и `Promise`:
```javascript
function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function printWithDelay(arr) {
  for (let i = 0; i < arr.length; i++) {
    await delay(1000); // Ожидаем 1 секунду
    console.log(arr[i]);
  }
}

const arr = ['a', 'b', 'c', 'd', 'e'];
printWithDelay(arr);
```
Объяснение:
- Функция `delay` возвращает `Promise`, который выполняется через заданное количество миллисекунд.
- В цикле мы используем `await` для того, чтобы при каждой итерации цикл ждал завершения `setTimeout` перед тем, как перейти к следующей итерации.
- Этот метод позволяет синхронизировать асинхронные операции в цикле.
Пояснение:
- Использование `let` в цикле: В отличие от `var`, `let` имеет блочную область видимости, что позволяет каждому таймеру быть независимым и корректно работать с задержкой.
- Использование `async/await`: Это решение позволяет синхронизировать асинхронные операции в цикле, что удобно и читабельно. Это лучший вариант для асинхронных задач, когда необходимо делать паузы между итерациями.
Резюме:
1. `setTimeout` внутри цикла с `let`: Используйте `let`, чтобы корректно привязать каждую итерацию цикла к своему времени выполнения.
2. Использование `async/await`: Это более современный и удобный подход для синхронизации асинхронных операций внутри цикла.
--------------------------------------------------------------------------------------------- 
