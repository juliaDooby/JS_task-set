--------------------------------------------------------------------------------------------- 
‚ãô ‚ùç –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –≤ React (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º, Context API, Redux):
---
4. –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å Context API + useReducer
‚åõ –ó–∞–¥–∞—á–∞: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ `useReducer` –≤ —Å–≤—è–∑–∫–µ —Å `Context API` –¥–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–≥–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
üéØ –†–µ—à–µ–Ω–∏–µ:
```javascript
import React, { createContext, useReducer, useContext } from 'react';

// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
const CountContext = createContext();

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–¥—É–∫—Ç–æ—Ä
function countReducer(state, action) {
  switch (action.type) {
    case 'INCREMENT':
      return { count: state.count + 1 };
    default:
      return state;
  }
}

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä
function CountProvider({ children }) {
  const [state, dispatch] = useReducer(countReducer, { count: 0 });

  return (
    <CountContext.Provider value={{ state, dispatch }}>
      {children}
    </CountContext.Provider>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
function Counter() {
  const { state, dispatch } = useContext(CountContext);

  return (
    <div>
      <h1>Count: {state.count}</h1>
      <button onClick={() => dispatch({ type: 'INCREMENT' })}>Increment</button>
    </div>
  );
}

// App
function App() {
  return (
    <CountProvider>
      <Counter />
    </CountProvider>
  );
}
```

–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
- –° –ø–æ–º–æ—â—å—é `useReducer` –∏ `Context API` –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –ø—Ä–∏ —ç—Ç–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –º–æ–≥—É—Ç –ª–µ–≥–∫–æ –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç.
--------------------------------------------------------------------------------------------- 
