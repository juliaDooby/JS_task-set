---------------------------------------------------------------------------------------------
⋙ ❍ Задача «Расстояние редактирования»:
---
Задача о расстоянии редактирования (или расстоянии Левенштейна) — это классическая задача, которая вычисляет минимальное количество операций, необходимых для преобразования одной строки в другую. Операции могут быть следующими:
1. Вставка символа.
2. Удаление символа.
3. Замена символа на другой.
Давайте рассмотрим несколько задач с решениями и объяснениями на языке JavaScript для задачи о расстоянии редактирования.
1️⃣ Базовая задача: Вычисление расстояния редактирования между двумя строками
⌛ Задача: Найдите расстояние редактирования между двумя строками.
🎯 Решение:
```js
function editDistance(str1, str2) {
  const m = str1.length;
  const n = str2.length;
  const dp = Array(m + 1).fill().map(() => Array(n + 1).fill(0));

  for (let i = 0; i <= m; i++) {
    for (let j = 0; j <= n; j++) {
      if (i === 0) dp[i][j] = j; // Если первая строка пустая, нужно вставить все символы из второй строки
      else if (j === 0) dp[i][j] = i; // Если вторая строка пустая, нужно удалить все символы из первой строки
      else if (str1[i - 1] === str2[j - 1]) {
        dp[i][j] = dp[i - 1][j - 1]; // Если символы одинаковы, ничего не меняем
      } else {
        dp[i][j] = Math.min(
          dp[i - 1][j - 1], // Замена
          dp[i - 1][j], // Удаление
          dp[i][j - 1]  // Вставка
        ) + 1;
      }
    }
  }

  return dp[m][n];
}

console.log(editDistance("kitten", "sitting")); // 3
```
Объяснение: Мы используем динамическое программирование для вычисления расстояния редактирования. Таблица `dp` хранит минимальное количество операций для каждой подстроки.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
⋙ ❍ Задача «Расстояние редактирования»:
---
2️⃣ Задача: Расстояние редактирования для строк с одинаковыми буквами
⌛ Задача: Найдите расстояние редактирования для строк с одинаковыми буквами, но разным порядком.
🎯 Решение:
```js
function editDistance(str1, str2) {
  const m = str1.length;
  const n = str2.length;
  const dp = Array(m + 1).fill().map(() => Array(n + 1).fill(0));

  for (let i = 0; i <= m; i++) {
    for (let j = 0; j <= n; j++) {
      if (i === 0) dp[i][j] = j;
      else if (j === 0) dp[i][j] = i;
      else if (str1[i - 1] === str2[j - 1]) {
        dp[i][j] = dp[i - 1][j - 1];
      } else {
        dp[i][j] = Math.min(
          dp[i - 1][j - 1],
          dp[i - 1][j],
          dp[i][j - 1]
        ) + 1;
      }
    }
  }

  return dp[m][n];
}

console.log(editDistance("abc", "cba")); // 2
```
Объяснение: Строки одинаковы по набору символов, но символы в них расположены в разном порядке. Нужно выполнить две операции — замена и перестановка.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
⋙ ❍ Задача «Расстояние редактирования»:
---
3️⃣ Задача: Расстояние редактирования для пустых строк
⌛ Задача: Найдите расстояние редактирования между пустыми и непустыми строками.
🎯 Решение:
```js
function editDistance(str1, str2) {
  const m = str1.length;
  const n = str2.length;
  const dp = Array(m + 1).fill().map(() => Array(n + 1).fill(0));

  for (let i = 0; i <= m; i++) {
    for (let j = 0; j <= n; j++) {
      if (i === 0) dp[i][j] = j;
      else if (j === 0) dp[i][j] = i;
      else if (str1[i - 1] === str2[j - 1]) {
        dp[i][j] = dp[i - 1][j - 1];
      } else {
        dp[i][j] = Math.min(
          dp[i - 1][j - 1],
          dp[i - 1][j],
          dp[i][j - 1]
        ) + 1;
      }
    }
  }

  return dp[m][n];
}

console.log(editDistance("", "hello")); // 5
```
Объяснение: Если одна из строк пуста, то минимальное количество операций равно длине другой строки (необходимо только вставить или удалить все символы).
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
⋙ ❍ Задача «Расстояние редактирования»:
---
4️⃣ Задача: Расстояние редактирования для одинаковых строк
⌛ Задача: Найдите расстояние редактирования для одинаковых строк.
🎯 Решение:
```js
function editDistance(str1, str2) {
  const m = str1.length;
  const n = str2.length;
  const dp = Array(m + 1).fill().map(() => Array(n + 1).fill(0));

  for (let i = 0; i <= m; i++) {
    for (let j = 0; j <= n; j++) {
      if (i === 0) dp[i][j] = j;
      else if (j === 0) dp[i][j] = i;
      else if (str1[i - 1] === str2[j - 1]) {
        dp[i][j] = dp[i - 1][j - 1];
      } else {
        dp[i][j] = Math.min(
          dp[i - 1][j - 1],
          dp[i - 1][j],
          dp[i][j - 1]
        ) + 1;
      }
    }
  }

  return dp[m][n];
}

console.log(editDistance("hello", "hello")); // 0
```
Объяснение: Если строки одинаковы, то количество операций будет равно нулю, так как изменений не требуется.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
⋙ ❍ Задача «Расстояние редактирования»:
---
5️⃣ Задача: Расстояние редактирования для строк разной длины
⌛ Задача: Найдите расстояние редактирования между строками разной длины.
🎯 Решение:
```js
function editDistance(str1, str2) {
  const m = str1.length;
  const n = str2.length;
  const dp = Array(m + 1).fill().map(() => Array(n + 1).fill(0));

  for (let i = 0; i <= m; i++) {
    for (let j = 0; j <= n; j++) {
      if (i === 0) dp[i][j] = j;
      else if (j === 0) dp[i][j] = i;
      else if (str1[i - 1] === str2[j - 1]) {
        dp[i][j] = dp[i - 1][j - 1];
      } else {
        dp[i][j] = Math.min(
          dp[i - 1][j - 1],
          dp[i - 1][j],
          dp[i][j - 1]
        ) + 1;
      }
    }
  }

  return dp[m][n];
}

console.log(editDistance("abc", "abcdef")); // 3
```
Объяснение: Строки разной длины требуют вставки символов в более короткую строку или удаления символов из более длинной.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
⋙ ❍ Задача «Расстояние редактирования»:
---
6️⃣ Задача: Расстояние редактирования для строк с разными символами
⌛ Задача: Найдите расстояние редактирования для строк, которые содержат разные символы.
🎯 Решение:
```js
function editDistance(str1, str2) {
  const m = str1.length;
  const n = str2.length;
  const dp = Array(m + 1).fill().map(() => Array(n + 1).fill(0));

  for (let i = 0; i <= m; i++) {
    for (let j = 0; j <= n; j++) {
      if (i === 0) dp[i][j] = j;
      else if (j === 0) dp[i][j] = i;
      else if (str1[i - 1] === str2[j - 1]) {
        dp[i][j] = dp[i - 1][j - 1];
      } else {
        dp[i][j] = Math.min(
          dp[i - 1][j - 1],
          dp[i - 1][j],
          dp[i][j - 1]
        ) + 1;
      }
    }
  }

  return dp[m][n];
}

console.log(editDistance("abc", "xyz")); // 3
```
Объяснение: Строки содержат разные символы, поэтому минимальное количество операций — три замены.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
⋙ ❍ Задача «Расстояние редактирования»:
---
7️⃣ Задача: Задача с минимальной длиной строки
⌛ Задача: Найдите расстояние редактирования для строки, которая является подстрокой другой строки.
🎯 Решение:
```js
function editDistance(str1, str2) {
  const m = str1.length;
  const n = str2.length;
  const dp = Array(m + 1).fill().map(() => Array(n + 1).fill(0));

  for (let i = 0; i <= m; i++) {
    for (let j = 0; j <= n; j++) {
      if (i === 0) dp[i][j] = j;
      else if (j === 0) dp[i][j] = i;
      else if (str1[i - 1] === str2[j - 1]) {
        dp[i][j] = dp[i - 1][j - 1];
      } else {
        dp[i][j] = Math.min(
          dp[i - 1][j - 1],
          dp[i - 1][j],
          dp[i][j - 1]
        ) + 1;
      }
    }
  }

  return dp[m][n];
}

console.log(editDistance("hello", "hell")); // 1
```
Объяснение: Если одна строка является подстрокой другой, то нужно просто удалить символы, которые не присутствуют в подстроке.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
⋙ ❍ Задача «Расстояние редактирования»:
---
8️⃣ Задача: Использование разных алфавитов
⌛ Задача: Найдите расстояние редактирования для строк, содержащих символы разных алфавитов.
🎯 Решение:
```js
function editDistance(str1, str2) {
  const m = str1.length;
  const n = str2.length;
  const dp = Array(m + 1).fill().map(() => Array(n + 1).fill(0));

  for (let i = 0; i <= m; i++) {
    for (let j = 0; j <= n; j++) {
      if (i === 0) dp[i][j] = j;
      else if (j === 0) dp[i][j] = i;
      else if (str1[i - 1] === str2[j - 1]) {
        dp[i][j] = dp[i - 1][j - 1];
      } else {
        dp[i][j] = Math.min(
          dp[i - 1][j - 1],
          dp[i - 1][j],
          dp[i][j - 1]
        ) + 1;
      }
    }
  }

  return dp[m][n];
}

console.log(editDistance("abc", "123")); // 3
```
Объяснение: Строки содержат разные символы, и для их приведения друг к другу потребуется три операции.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
⋙ ❍ Задача «Расстояние редактирования»:
---
9️⃣ Задача с повторами символов
⌛ Задача: Найдите расстояние редактирования для строк, содержащих одинаковые символы, но в разном количестве.
🎯 Решение:
```js
function editDistance(str1, str2) {
  const m = str1.length;
  const n = str2.length;
  const dp = Array(m + 1).fill().map(() => Array(n + 1).fill(0));

  for (let i = 0; i <= m; i++) {
    for (let j = 0; j <= n; j++) {
      if (i === 0) dp[i][j] = j;
      else if (j === 0) dp[i][j] = i;
      else if (str1[i - 1] === str2[j - 1]) {
        dp[i][j] = dp[i - 1][j - 1];
      } else {
        dp[i][j] = Math.min(
          dp[i - 1][j - 1],
          dp[i - 1][j],
          dp[i][j - 1]
        ) + 1;
      }
    }
  }

  return dp[m][n];
}

console.log(editDistance("aaabbb", "ababab")); // 3
```
Объяснение: В данном случае необходимо выполнить несколько операций вставки или удаления символов для согласования строк.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
⋙ ❍ Задача «Расстояние редактирования»:
---
🔟 Задача с длинными строками
⌛ Задача: Найдите расстояние редактирования между очень длинными строками.
🎯 Решение:
```js
function editDistance(str1, str2) {
  const m = str1.length;
  const n = str2.length;
  const dp = Array(m + 1).fill().map(() => Array(n + 1).fill(0));

  for (let i = 0; i <= m; i++) {
    for (let j = 0; j <= n; j++) {
      if (i === 0) dp[i][j] = j;
      else if (j === 0) dp[i][j] = i;
      else if (str1[i - 1] === str2[j - 1]) {
        dp[i][j] = dp[i - 1][j - 1];
      } else {
        dp[i][j] = Math.min(
          dp[i - 1][j - 1],
          dp[i - 1][j],
          dp[i][j - 1]
        ) + 1;
      }
    }
  }

  return dp[m][n];
}

console.log(editDistance("a".repeat(1000), "b".repeat(1000))); // 1000
```
 Объяснение: Для очень длинных строк количество операций будет линейным по отношению к длине строк.
---------------------------------------------------------------------------------------------
