---------------------------------------------------------------------------------------------
⋙ ❍ Задача LCS:
---
Задача: Longest Common Subsequence (LCS) — это классическая задача динамического программирования, которая заключается в нахождении наибольшей общей подпоследовательности двух строк. Подпоследовательность — это последовательность символов, которая может быть получена из другой строки путем удаления некоторых (или вообще всех) символов, не меняя порядка оставшихся символов.
Пример: для строк `"AGGTAB"` и `"GXTXAYB"`, наибольшая общая подпоследовательность — это `"GTAB"`.
1️⃣ Базовая задача LC
⌛ Задача: Найдите наибольшую общую подпоследовательность (LCS) двух строк.
🎯 Решение:
```js
function lcs(str1, str2) {
  const m = str1.length, n = str2.length;
  const dp = Array(m + 1).fill().map(() => Array(n + 1).fill(0));

  for (let i = 1; i <= m; i++) {
    for (let j = 1; j <= n; j++) {
      if (str1[i - 1] === str2[j - 1]) {
        dp[i][j] = dp[i - 1][j - 1] + 1;
      } else {
        dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
      }
    }
  }

  return dp[m][n];
}

console.log(lcs("AGGTAB", "GXTXAYB")); // 4
```Объяснение В этом решении мы используем таблицу динамического программирования (`dp`), чтобы хранить длину LCS для каждой подстроки. Каждый элемент `dp[i][j]` представляет длину LCS для первых `i` символов строки `str1` и первых `j` символов строки `str2`.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
⋙ ❍ Задача LCS:
---
2️⃣ ⌛ Задача на восстановление LCЗадача Найдите не только длину LCS, но и саму подпоследовательность.
🎯 Решение:
```js
function lcsWithSequence(str1, str2) {
  const m = str1.length, n = str2.length;
  const dp = Array(m + 1).fill().map(() => Array(n + 1).fill(0));

  for (let i = 1; i <= m; i++) {
    for (let j = 1; j <= n; j++) {
      if (str1[i - 1] === str2[j - 1]) {
        dp[i][j] = dp[i - 1][j - 1] + 1;
      } else {
        dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
      }
    }
  }

  let lcsString = '';
  let i = m, j = n;
  while (i > 0 && j > 0) {
    if (str1[i - 1] === str2[j - 1]) {
      lcsString = str1[i - 1] + lcsString;
      i--;
      j--;
    } else if (dp[i - 1][j] > dp[i][j - 1]) {
      i--;
    } else {
      j--;
    }
  }

  return lcsString;
}

console.log(lcsWithSequence("AGGTAB", "GXTXAYB")); // GTAB
```Объяснение Мы строим таблицу, как в предыдущем решении, но после вычисления длины LCS, мы восстанавливаем саму подпоследовательность, двигаясь по таблице обратно.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
⋙ ❍ Задача LCS:
---
3️⃣ ⌛ Задача с пустой строкоЗадача Найдите LCS двух строк, одна из которых пуста.
🎯 Решение:
```js
function lcs(str1, str2) {
  const m = str1.length, n = str2.length;
  const dp = Array(m + 1).fill().map(() => Array(n + 1).fill(0));

  for (let i = 1; i <= m; i++) {
    for (let j = 1; j <= n; j++) {
      if (str1[i - 1] === str2[j - 1]) {
        dp[i][j] = dp[i - 1][j - 1] + 1;
      } else {
        dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
      }
    }
  }

  return dp[m][n];
}

console.log(lcs("", "ABCD")); // 0
```Объяснение Если одна из строк пуста, то длина их LCS будет равна нулю.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
⋙ ❍ Задача LCS:
---
4️⃣ ⌛ Задача с одинаковыми строкамЗадача Найдите LCS двух одинаковых строк.
🎯 Решение:
```js
function lcs(str1, str2) {
  const m = str1.length, n = str2.length;
  const dp = Array(m + 1).fill().map(() => Array(n + 1).fill(0));

  for (let i = 1; i <= m; i++) {
    for (let j = 1; j <= n; j++) {
      if (str1[i - 1] === str2[j - 1]) {
        dp[i][j] = dp[i - 1][j - 1] + 1;
      } else {
        dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
      }
    }
  }

  return dp[m][n];
}

console.log(lcs("ABCDE", "ABCDE")); // 5
```Объяснение Если строки одинаковы, то LCS будет равно длине этих строк.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
⋙ ❍ Задача LCS:
---
5️⃣ ⌛ Задача на использование различных алфавитоЗадача Найдите LCS для строк с разными наборами символов (например, строки с разными языками).
🎯 Решение:
```js
function lcs(str1, str2) {
  const m = str1.length, n = str2.length;
  const dp = Array(m + 1).fill().map(() => Array(n + 1).fill(0));

  for (let i = 1; i <= m; i++) {
    for (let j = 1; j <= n; j++) {
      if (str1[i - 1] === str2[j - 1]) {
        dp[i][j] = dp[i - 1][j - 1] + 1;
      } else {
        dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
      }
    }
  }

  return dp[m][n];
}

console.log(lcs("абвгде", "гдеабв")); // 3
```Объяснение Алфавит не имеет значения, поскольку мы просто сравниваем символы в строках.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
⋙ ❍ Задача LCS:
---
6️⃣ ⌛ Задача на LCS для двух строк с пробеламЗадача Найдите LCS двух строк, которые содержат пробелы.
🎯 Решение:
```js
function lcs(str1, str2) {
  const m = str1.length, n = str2.length;
  const dp = Array(m + 1).fill().map(() => Array(n + 1).fill(0));

  for (let i = 1; i <= m; i++) {
    for (let j = 1; j <= n; j++) {
      if (str1[i - 1] === str2[j - 1]) {
        dp[i][j] = dp[i - 1][j - 1] + 1;
      } else {
        dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
      }
    }
  }

  return dp[m][n];
}

console.log(lcs("hello world", "helloworld")); // 10
```Объяснение Пробелы считаются символами, и они участвуют в поиске общей подпоследовательности.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
⋙ ❍ Задача LCS:
---
7️⃣ ⌛ Задача с большими строкамЗадача Найдите LCS для длинных строк.
🎯 Решение:
```js
function lcs(str1, str2) {
  const m = str1.length, n = str2.length;
  const dp = Array(m + 1).fill().map(() => Array(n + 1).fill(0));

  for (let i = 1; i <= m; i++) {
    for (let j = 1; j <= n; j++) {
      if (str1[i - 1] === str2[j - 1]) {
        dp[i][j] = dp[i - 1][j - 1] + 1;
      } else {
        dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
      }
    }
  }

  return dp[m][n];
}

const str1 = "A".repeat(1000) + "B".repeat(1000);
const str2 = "A".repeat(500) + "B".repeat(1000);
console.log(lcs(str1, str2)); // 1500
```
Объяснение Алгоритм динамического программирования эффективно решает задачу даже для длинных строк, но при больших строках возможна высокая временная сложность.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
⋙ ❍ Задача LCS:
---
8️⃣ ⌛ Задача на LCS для числовых строЗадача Найдите LCS для строк, содержащих только числа.
🎯 Решение:
```js
function lcs(str1, str2) {
  const m = str1.length, n = str2.length;
  const dp = Array(m + 1).fill().map(() => Array(n + 1).fill(0));

  for (let i = 1; i <= m; i++) {
    for (let j = 1; j <= n; j++) {
      if (str1[i - 1] === str2[j - 1]) {
        dp[i][j] = dp[i - 1][j - 1] + 1;
      } else {
        dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
      }
    }
  }

  return dp[m][n];
}

console.log(lcs("123456", "13524")); // 3
```Объяснение Задача LCS работает так же, независимо от того, какие символы содержатся в строках.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
⋙ ❍ Задача LCS:
---
9️⃣ ⌛ Задача на LCS для последовательности слоЗадача Найдите LCS для двух строк, где каждое слово разделено пробелом.
🎯 Решение:
```js
function lcs(str1, str2) {
  const words1 = str1.split(' '), words2 = str2.split(' ');
  const m = words1.length, n = words2.length;
  const dp = Array(m + 1).fill().map(() => Array(n + 1).fill(0));

  for (let i = 1; i <= m; i++) {
    for (let j = 1; j <= n; j++) {
      if (words1[i - 1] === words2[j - 1]) {
        dp[i][j] = dp[i - 1][j - 1] + 1;
      } else {
        dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
      }
    }
  }

  return dp[m][n];
}

console.log(lcs("I love programming", "I love coding")); // 2
```Объяснение Мы разделяем строки на слова и находим наибольшую общую подпоследовательность для слов.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
⋙ ❍ Задача LCS:
---
🔟 ⌛ Задача на LCS для строки с цифрами и буквамЗадача Найдите LCS для строки, содержащей и цифры, и буквы.
🎯 Решение:
```js
function lcs(str1, str2) {
  const m = str1.length, n = str2.length;
  const dp = Array(m + 1).fill().map(() => Array(n + 1).fill(0));

  for (let i = 1; i <= m; i++) {
    for (let j = 1; j <= n; j++) {
      if (str1[i - 1] === str2[j - 1]) {
        dp[i][j] = dp[i - 1][j - 1] + 1;
      } else {
        dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
      }
    }
  }

  return dp[m][n];
}

console.log(lcs("abc123", "abc321")); // 3
```Объяснение Решение аналогично предыдущим примерам, только строки содержат и цифры, и буквы.
Эти задачи помогают разобраться в решении задачи LCS с различными вариантами входных данных и ситуациями.
---------------------------------------------------------------------------------------------
