---------------------------------------------------------------------------------------------  
‚ãô ‚ùç ‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—Å–∞—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä:
---
–í–æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –Ω–∞ Vanilla JavaScript –∏ React. –ü—Ä–∏–º–µ—Ä –≤–∫–ª—é—á–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: —Å–ª–æ–∂–µ–Ω–∏–µ, –≤—ã—á–∏—Ç–∞–Ω–∏–µ, —É–º–Ω–æ–∂–µ–Ω–∏–µ –∏ –¥–µ–ª–µ–Ω–∏–µ.
üéØ –†–µ—à–µ–Ω–∏–µ:
1. –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–∞ Vanilla JavaScript
HTML
```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Vanilla JS Calculator</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      text-align: center;
      margin-top: 50px;
    }

    .calculator {
      width: 300px;
      margin: 0 auto;
      border: 1px solid #ccc;
      border-radius: 8px;
      padding: 20px;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
    }

    .display {
      width: 100%;
      height: 50px;
      font-size: 20px;
      text-align: right;
      margin-bottom: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      padding: 5px;
      box-sizing: border-box;
    }

    .buttons {
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      gap: 10px;
    }

    button {
      padding: 15px;
      font-size: 18px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      background-color: #007bff;
      color: white;
    }

    button:hover {
      background-color: #0056b3;
    }

    button.operation {
      background-color: #ff4d4d;
    }

    button.operation:hover {
      background-color: #ff1a1a;
    }
  </style>
</head>
<body>
  <div class="calculator">
    <input type="text" id="display" class="display" disabled />
    <div class="buttons">
      <button class="number">7</button>
      <button class="number">8</button>
      <button class="number">9</button>
      <button class="operation">/</button>
      <button class="number">4</button>
      <button class="number">5</button>
      <button class="number">6</button>
      <button class="operation">*</button>
      <button class="number">1</button>
      <button class="number">2</button>
      <button class="number">3</button>
      <button class="operation">-</button>
      <button class="number">0</button>
      <button class="clear">C</button>
      <button class="equals">=</button>
      <button class="operation">+</button>
    </div>
  </div>

  <script src="script.js"></script>
</body>
</html>
```
---
JavaScript
```javascript
const display = document.getElementById("display");
const buttons = document.querySelectorAll(".buttons button");

let currentInput = ""; // –¢–µ–∫—É—â–µ–µ –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
let previousInput = ""; // –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
let operation = null; // –¢–µ–∫—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
buttons.forEach((button) => {
  button.addEventListener("click", () => {
    const value = button.textContent;

    if (button.classList.contains("number")) {
      currentInput += value;
      display.value = currentInput;
    } else if (button.classList.contains("operation")) {
      if (currentInput === "") return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
      previousInput = currentInput;
      currentInput = "";
      operation = value;
    } else if (button.classList.contains("equals")) {
      if (operation && previousInput !== "" && currentInput !== "") {
        currentInput = calculate(previousInput, currentInput, operation);
        display.value = currentInput;
        previousInput = "";
        operation = null;
      }
    } else if (button.classList.contains("clear")) {
      currentInput = "";
      previousInput = "";
      operation = null;
      display.value = "";
    }
  });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
function calculate(a, b, operation) {
  const num1 = parseFloat(a);
  const num2 = parseFloat(b);

  switch (operation) {
    case "+":
      return (num1 + num2).toString();
    case "-":
      return (num1 - num2).toString();
    case "*":
      return (num1 * num2).toString();
    case "/":
      return num2 !== 0 ? (num1 / num2).toString() : "Error";
    default:
      return "";
  }
}
```
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç ‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—Å–∞—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä:
---
2. –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–∞ React
---
–ö–æ–¥ React
```jsx
import React, { useState } from "react";

function Calculator() {
  const [display, setDisplay] = useState("");
  const [previousInput, setPreviousInput] = useState("");
  const [operation, setOperation] = useState(null);

  const handleNumberClick = (value) => {
    setDisplay(display + value);
  };

  const handleOperationClick = (value) => {
    if (!display) return;
    setPreviousInput(display);
    setDisplay("");
    setOperation(value);
  };

  const handleEqualsClick = () => {
    if (!operation || !previousInput || !display) return;
    const result = calculate(previousInput, display, operation);
    setDisplay(result);
    setPreviousInput("");
    setOperation(null);
  };

  const handleClearClick = () => {
    setDisplay("");
    setPreviousInput("");
    setOperation(null);
  };

  const calculate = (a, b, operation) => {
    const num1 = parseFloat(a);
    const num2 = parseFloat(b);

    switch (operation) {
      case "+":
        return (num1 + num2).toString();
      case "-":
        return (num1 - num2).toString();
      case "*":
        return (num1 * num2).toString();
      case "/":
        return num2 !== 0 ? (num1 / num2).toString() : "Error";
      default:
        return "";
    }
  };

  return (
    <div style={styles.calculator}>
      <input type="text" value={display} readOnly style={styles.display} />
      <div style={styles.buttons}>
        {["7", "8", "9", "/"].map((btn) => (
          <button
            key={btn}
            onClick={() =>
              btn === "/" ? handleOperationClick("/") : handleNumberClick(btn)
            }
            style={btn === "/" ? styles.operationButton : styles.button}
          >
            {btn}
          </button>
        ))}
        {["4", "5", "6", "*"].map((btn) => (
          <button
            key={btn}
            onClick={() =>
              btn === "*" ? handleOperationClick("*") : handleNumberClick(btn)
            }
            style={btn === "*" ? styles.operationButton : styles.button}
          >
            {btn}
          </button>
        ))}
        {["1", "2", "3", "-"].map((btn) => (
          <button
            key={btn}
            onClick={() =>
              btn === "-" ? handleOperationClick("-") : handleNumberClick(btn)
            }
            style={btn === "-" ? styles.operationButton : styles.button}
          >
            {btn}
          </button>
        ))}
        {["0", "C", "=", "+"].map((btn) => (
          <button
            key={btn}
            onClick={() => {
              if (btn === "C") handleClearClick();
              else if (btn === "=") handleEqualsClick();
              else if (btn === "+") handleOperationClick("+");
              else handleNumberClick(btn);
            }}
            style={btn === "+" || btn === "=" ? styles.operationButton : styles.button}
          >
            {btn}
          </button>
        ))}
      </div>
    </div>
  );
}

const styles = {
  calculator: {
    width: "300px",
    margin: "50px auto",
    padding: "20px",
    border: "1px solid #ccc",
    borderRadius: "8px",
    boxShadow: "0 4px 10px rgba(0, 0, 0, 0.2)",
  },
  display: {
    width: "100%",
    height: "50px",
    fontSize: "20px",
    textAlign: "right",
    marginBottom: "10px",
    border: "1px solid #ccc",
    borderRadius: "5px",
    padding: "5px",
    boxSizing: "border-box",
  },
  buttons: {
    display: "grid",
    gridTemplateColumns: "repeat(4, 1fr)",
    gap: "10px",
  },
  button: {
    padding: "15px",
    fontSize: "18px",
    border: "none",
    borderRadius: "5px",
    cursor: "pointer",
    backgroundColor: "#007bff",
    color: "white",
  },
  operationButton: {
    padding: "15px",
    fontSize: "18px",
    border: "none",
    borderRadius: "5px",
    cursor: "pointer",
    backgroundColor: "#ff4d4d",
    color: "white",
  },
};

export default Calculator;
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ
Vanilla JS:
- –°–æ—Å—Ç–æ—è–Ω–∏–µ:
  - `currentInput` –∏ `previousInput` —Ö—Ä–∞–Ω—è—Ç —Ç–µ–∫—É—â–µ–µ –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.
- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π:
  - –ö–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç —Ü–∏—Ñ—Ä—ã, –∑–∞–¥–∞—é—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –æ—á–∏—â–∞—é—Ç —ç–∫—Ä–∞–Ω.
- –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π:
  - –§—É–Ω–∫—Ü–∏—è `calculate` –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è.
React:
- –°–æ—Å—Ç–æ—è–Ω–∏—è:
  - –•—É–∫–∏ `useState` —Ö—Ä–∞–Ω—è—Ç —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é.
- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π:
  - `handleNumberClick`, `handleOperationClick` –∏ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç –¥–µ–π—Å—Ç–≤–∏—è.
- UI:
  - –ö–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —Å –ø–æ–º–æ—â—å—é –º–∞—Å—Å–∏–≤–∞ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∫–æ–¥–∞.
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏:
---
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—Å–∞—Ç—å —Ä–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏:
üéØ –†–µ—à–µ–Ω–∏–µ:
1. Vanilla JavaScript
HTML
```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Cost Calculator</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      padding: 20px;
      background-color: #f4f4f4;
    }

    .container {
      max-width: 400px;
      margin: 0 auto;
      background: #fff;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    input, select, button {
      width: 100%;
      margin-bottom: 10px;
      padding: 10px;
      font-size: 16px;
      border: 1px solid #ccc;
      border-radius: 5px;
    }

    button {
      background-color: #007bff;
      color: white;
      cursor: pointer;
    }

    button:hover {
      background-color: #0056b3;
    }

    .result {
      font-size: 18px;
      font-weight: bold;
      color: #333;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Cost Calculator</h1>
    <input type="number" id="quantity" placeholder="Enter quantity" />
    <select id="pricePerUnit">
      <option value="10">Price per unit: $10</option>
      <option value="20">Price per unit: $20</option>
      <option value="30">Price per unit: $30</option>
    </select>
    <button id="calculateBtn">Calculate</button>
    <p class="result" id="result">Total cost: $0</p>
  </div>

  <script src="script.js"></script>
</body>
</html>
```
---
JavaScript
```javascript
// –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ DOM
const quantityInput = document.getElementById('quantity');
const priceSelect = document.getElementById('pricePerUnit');
const calculateBtn = document.getElementById('calculateBtn');
const result = document.getElementById('result');

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
calculateBtn.addEventListener('click', () => {
  const quantity = parseInt(quantityInput.value) || 0;
  const pricePerUnit = parseInt(priceSelect.value) || 0;

  const totalCost = quantity * pricePerUnit;

  result.textContent = `Total cost: $${totalCost}`;
});
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ (Vanilla JS):
1. HTML:
   - –ü–æ–ª–µ –≤–≤–æ–¥–∞ `<input>` –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.
   - –°–µ–ª–µ–∫—Ç `<select>` –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ü–µ–Ω—É –∑–∞ –µ–¥–∏–Ω–∏—Ü—É.
   - –ö–Ω–æ–ø–∫–∞ `<button>` –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—Å—á—ë—Ç.
   - –≠–ª–µ–º–µ–Ω—Ç `<p>` –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å.
2. JS:
   - –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–æ–ª–µ–π —Å –ø–æ–º–æ—â—å—é `value`.
   - –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å, —É–º–Ω–æ–∂–∞—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Ü–µ–Ω—É.
   - –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ `<p>`.
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏:
---
2. –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ React
–ö–æ–¥ React
```jsx
import React, { useState } from "react";

function CostCalculator() {
  const [quantity, setQuantity] = useState(0);
  const [pricePerUnit, setPricePerUnit] = useState(10);
  const [totalCost, setTotalCost] = useState(0);

  const calculateCost = () => {
    setTotalCost(quantity * pricePerUnit);
  };

  return (
    <div style={styles.container}>
      <h1>Cost Calculator</h1>
      <input
        type="number"
        value={quantity}
        onChange={(e) => setQuantity(Number(e.target.value))}
        placeholder="Enter quantity"
        style={styles.input}
      />
      <select
        value={pricePerUnit}
        onChange={(e) => setPricePerUnit(Number(e.target.value))}
        style={styles.input}
      >
        <option value={10}>Price per unit: $10</option>
        <option value={20}>Price per unit: $20</option>
        <option value={30}>Price per unit: $30</option>
      </select>
      <button onClick={calculateCost} style={styles.button}>
        Calculate
      </button>
      <p style={styles.result}>Total cost: ${totalCost}</p>
    </div>
  );
}

const styles = {
  container: {
    maxWidth: "400px",
    margin: "0 auto",
    padding: "20px",
    background: "#fff",
    borderRadius: "8px",
    boxShadow: "0 2px 10px rgba(0, 0, 0, 0.1)",
  },
  input: {
    width: "100%",
    marginBottom: "10px",
    padding: "10px",
    fontSize: "16px",
    border: "1px solid #ccc",
    borderRadius: "5px",
  },
  button: {
    width: "100%",
    padding: "10px",
    fontSize: "16px",
    backgroundColor: "#007bff",
    color: "white",
    border: "none",
    borderRadius: "5px",
    cursor: "pointer",
  },
  result: {
    fontSize: "18px",
    fontWeight: "bold",
    color: "#333",
  },
};

export default CostCalculator;
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ (React):
1. –°–æ—Å—Ç–æ—è–Ω–∏—è (`useState`):
   - `quantity`: –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.
   - `pricePerUnit`: –•—Ä–∞–Ω–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ü–µ–Ω—É –∑–∞ –µ–¥–∏–Ω–∏—Ü—É.
   - `totalCost`: –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å.
2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π:
   - –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏–ª–∏ —Å–µ–ª–µ–∫—Ç–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è `onChange`, –∫–æ—Ç–æ—Ä—ã–π –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ `setQuantity` –∏–ª–∏ `setPricePerUnit`.
3. –†–∞—Å—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏:
   - –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ `Calculate` –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è `calculateCost`, –∫–æ—Ç–æ—Ä–∞—è —É–º–Ω–æ–∂–∞–µ—Ç `quantity` –Ω–∞ `pricePerUnit` –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ `totalCost`.
4. –°—Ç–∏–ª–∏:
   - –°—Ç–∏–ª–∏ –∑–∞–¥–∞—é—Ç—Å—è –≤ –æ–±—ä–µ–∫—Ç–µ `styles` –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è.
---
–ö–∞–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—å React-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:
1. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç React:
   ```bash
   npx create-react-app cost-calculator
   cd cost-calculator
   ```
2. –ó–∞–º–µ–Ω–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ `src/App.js` –Ω–∞ –∫–æ–¥ React.
3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:
   ```bash
   npm start
   ```
–†–µ–∑—É–ª—å—Ç–∞—Ç:
–ò –≤ –≤–µ—Ä—Å–∏–∏ Vanilla JS, –∏ –≤ –≤–µ—Ä—Å–∏–∏ React –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç:
- –í–≤–æ–¥–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.
- –í—ã–±–∏—Ä–∞—Ç—å —Ü–µ–Ω—É –∑–∞ –µ–¥–∏–Ω–∏—Ü—É.
- –ù–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏.
- –í–∏–¥–µ—Ç—å –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –°–ø–∏—Å–æ–∫ to do:
---
‚åõ –ó–∞–¥–∞—á–∞: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å To-Do List —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, —É–¥–∞–ª–µ–Ω–∏—è –∏ –æ—Ç–º–µ—Ç–∫–∏ –∑–∞–¥–∞—á –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ React.
–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏.
2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∑–∞–¥–∞—á–∏.
3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–º–µ—á–∞—Ç—å –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ.
4. –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ.
üéØ –†–µ—à–µ–Ω–∏–µ:
1. –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
–°–æ–∑–¥–∞–¥–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç `TodoApp`, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á.
```jsx
import React, { useState } from "react";

function TodoApp() {
  const [tasks, setTasks] = useState([]);
  const [newTask, setNewTask] = useState("");

  const addTask = () => {
    if (newTask.trim() === "") return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏
    const task = { id: Date.now(), text: newTask, completed: false };
    setTasks([...tasks, task]);
    setNewTask(""); // –°–±—Ä–æ—Å –ø–æ–ª—è –≤–≤–æ–¥–∞
  };

  const deleteTask = (id) => {
    setTasks(tasks.filter((task) => task.id !== id));
  };

  const toggleTaskCompletion = (id) => {
    setTasks(
      tasks.map((task) =>
        task.id === id ? { ...task, completed: !task.completed } : task
      )
    );
  };

  return (
    <div>
      <h1>To-Do List</h1>
      <div>
        <input
          type="text"
          value={newTask}
          onChange={(e) => setNewTask(e.target.value)}
          placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É"
        />
        <button onClick={addTask}>–î–æ–±–∞–≤–∏—Ç—å</button>
      </div>
      <ul>
        {tasks.map((task) => (
          <li key={task.id}>
            <span
              style={{
                textDecoration: task.completed ? "line-through" : "none",
                cursor: "pointer",
              }}
              onClick={() => toggleTaskCompletion(task.id)}
            >
              {task.text}
            </span>
            <button onClick={() => deleteTask(task.id)}>–£–¥–∞–ª–∏—Ç—å</button>
          </li>
        ))}
      </ul>
    </div>
  );
}

export default TodoApp;
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
1. –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–¥–∞—á:
   - –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ `useState` –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á:
     ```jsx
     const [tasks, setTasks] = useState([]);
     ```
   - –ö–∞–∂–¥–∞—è –∑–∞–¥–∞—á–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –æ–±—ä–µ–∫—Ç–æ–º —Å —Ç—Ä–µ–º—è —Å–≤–æ–π—Å—Ç–≤–∞–º–∏:
     - `id`: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏.
     - `text`: –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏.
     - `completed`: –§–ª–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (`true`/`false`).
2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:
   - –°–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –∑–∞–¥–∞—á–∏:
     ```jsx
     const task = { id: Date.now(), text: newTask, completed: false };
     ```
   - –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫ —Å–ø–∏—Å–∫—É —Å –ø–æ–º–æ—â—å—é:
     ```jsx
     setTasks([...tasks, task]);
     ```
3. –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:
   - –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, –∏—Å–∫–ª—é—á–∞—è –∑–∞–¥–∞—á—É —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º `id`:
     ```jsx
     setTasks(tasks.filter((task) => task.id !== id));
     ```
4. –û—Ç–º–µ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π:
   - –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ `map`, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ `completed` –¥–ª—è –Ω—É–∂–Ω–æ–π –∑–∞–¥–∞—á–∏:
     ```jsx
     setTasks(
       tasks.map((task) =>
         task.id === id ? { ...task, completed: !task.completed } : task
       )
     );
     ```
5. –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∑–∞–¥–∞—á:
   - –ò—Å–ø–æ–ª—å–∑—É–µ–º `map` –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏ –≤ —Å–ø–∏—Å–∫–µ:
     ```jsx
     tasks.map((task) => (
       <li key={task.id}>
         <span>{task.text}</span>
       </li>
     ));
     ```
   - –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∑–∞—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:
     ```jsx
     style={{ textDecoration: task.completed ? "line-through" : "none" }}
     ```
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:
1. –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
–î–æ–±–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç:
```jsx
{tasks.length === 0 && <p>–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç</p>}
```
2. –í–∞–ª–∏–¥–∞—Ü–∏—è
–ò–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ –≤–≤–æ–¥ –ø—É—Å—Ç—ã—Ö –∑–∞–¥–∞—á:
```jsx
if (newTask.trim() === "") return;
```
3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ `localStorage`
–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∑–∞–¥–∞—á–∏ –≤ `localStorage`, —á—Ç–æ–±—ã –æ–Ω–∏ —Å–æ—Ö—Ä–∞–Ω—è–ª–∏—Å—å –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:
```jsx
useEffect(() => {
  const savedTasks = JSON.parse(localStorage.getItem("tasks"));
  if (savedTasks) {
    setTasks(savedTasks);
  }
}, []);

useEffect(() => {
  localStorage.setItem("tasks", JSON.stringify(tasks));
}, [tasks]);
```
---
–ü—Ä–∏–º–µ—Ä —Å—Ç–∏–ª–µ–π (CSS):
```css
body {
  font-family: Arial, sans-serif;
  margin: 0;
  padding: 20px;
  background-color: #f4f4f4;
}

h1 {
  color: #333;
}

input {
  padding: 8px;
  margin-right: 10px;
}

button {
  padding: 8px 12px;
  cursor: pointer;
}

ul {
  list-style: none;
  padding: 0;
}

li {
  margin: 10px 0;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

span {
  cursor: pointer;
}

button {
  background-color: #ff4d4d;
  color: white;
  border: none;
  border-radius: 5px;
}

button:hover {
  background-color: #ff1a1a;
}
```
–ö–∞–∫ —ç—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç React —Å –ø–æ–º–æ—â—å—é:
   ```bash
   npx create-react-app todo-app
   cd todo-app
   ```
2. –ó–∞–º–µ–Ω–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ `App.js` –Ω–∞ –∫–æ–¥ –∏–∑ –∑–∞–¥–∞—á–∏.
3. –î–æ–±–∞–≤—å—Ç–µ —Å—Ç–∏–ª–∏ –≤ —Ñ–∞–π–ª `App.css`.
4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:
   ```bash
   npm start
   ```
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –°–ø–∏—Å–æ–∫ to do:
---
Javascript
–î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º –∫–æ–¥ –ø–æ—à–∞–≥–æ–≤–æ, –æ–±—ä—è—Å–Ω—è—è –∫–∞–∂–¥—ã–π —ç—Ç–∞–ø.  
---
1. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º HTML  
–°–Ω–∞—á–∞–ª–∞ –Ω–∞–º –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º HTML, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å.  
–í HTML —É –Ω–∞—Å –µ—Å—Ç—å:  
- –ü–æ–ª–µ –≤–≤–æ–¥–∞ (`<input>`), –∫—É–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏  
- –ö–Ω–æ–ø–∫–∞ (`<button>`) –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏  
- –°–ø–∏—Å–æ–∫ (`<ul>`), –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏  

–í JavaScript –º—ã –ø–æ–ª—É—á–∞–µ–º —ç—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –ø–æ–º–æ—â—å—é `document.getElementById`:
```javascript
const taskInput = document.getElementById("taskInput");
const addTaskButton = document.getElementById("addTaskButton");
const taskList = document.getElementById("taskList");
```
–¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å —Å —ç—Ç–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –≤ –∫–æ–¥–µ.
---
2. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏  
–°–æ–∑–¥–∞–¥–∏–º —Ñ—É–Ω–∫—Ü–∏—é `addTask()`, –∫–æ—Ç–æ—Ä–∞—è:  
1. –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –ø–æ–ª—è –≤–≤–æ–¥–∞  
2. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–ª–µ –Ω–µ –ø—É—Å—Ç–æ–µ  
3. –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ (`<li>`)  
4. –î–æ–±–∞–≤–ª—è–µ—Ç –≤ –Ω–µ–≥–æ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏  
5. –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è  
6. –î–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ —ç—Ç–æ –≤ —Å–ø–∏—Å–æ–∫  

–í–æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è:
```javascript
function addTask() {
    const taskText = taskInput.value.trim(); // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏ —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º
    if (taskText === "") return; // –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏

    const taskItem = document.createElement("li"); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç <li>
    taskItem.textContent = taskText; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
    const deleteButton = document.createElement("button");
    deleteButton.textContent = "–£–¥–∞–ª–∏—Ç—å";
    deleteButton.onclick = function () {
        taskList.removeChild(taskItem); // –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
    };

    taskItem.appendChild(deleteButton); // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∑–∞–¥–∞—á—É
    taskList.appendChild(taskItem); // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫

    taskInput.value = ""; // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
}
```
---
3. –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ  
–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ `"–î–æ–±–∞–≤–∏—Ç—å"` —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∞ –Ω–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è `addTask()`.  
–î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º `addEventListener`:

```javascript
addTaskButton.addEventListener("click", addTask);
```

–¢–µ–ø–µ—Ä—å –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫—É `addTaskButton` –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è `addTask()`.
---
4. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–ª–∞–≤–∏—à–∏ Enter  
–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏ –Ω–µ —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–æ–π, –Ω–æ –∏ –Ω–∞–∂–∞—Ç–∏–µ–º –∫–ª–∞–≤–∏—à–∏ **Enter**, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è `keypress`:

```javascript
taskInput.addEventListener("keypress", function (event) {
    if (event.key === "Enter") {
        addTask();
    }
});
```

–ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç `Enter`, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∞—è —ç—Ç–æ –∫–ª–∞–≤–∏—à–∞ (`event.key === "Enter"`) –∏ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é `addTask()`.
---
–ò—Ç–æ–≥  
–¢–µ–ø–µ—Ä—å —É –Ω–∞—Å –µ—Å—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π **To-Do List**:  
‚úî –ú–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏  
‚úî –ù–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å" –∏–ª–∏ –∫–ª–∞–≤–∏—à—É **Enter**  
‚úî –í–∏–¥–µ—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ —Å–ø–∏—Å–∫–µ  
‚úî –£–¥–∞–ª—è—Ç—å –∑–∞–¥–∞—á–∏ –∫–Ω–æ–ø–∫–æ–π **"–£–¥–∞–ª–∏—Ç—å"**  

–ï—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ —É–ª—É—á—à–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å, –ø–∏—à–∏! üöÄ
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç ‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—Å–∞—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä:
---
–í–æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –Ω–∞ Vanilla JavaScript –∏ React. –ü—Ä–∏–º–µ—Ä –≤–∫–ª—é—á–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: —Å–ª–æ–∂–µ–Ω–∏–µ, –≤—ã—á–∏—Ç–∞–Ω–∏–µ, —É–º–Ω–æ–∂–µ–Ω–∏–µ –∏ –¥–µ–ª–µ–Ω–∏–µ.
üéØ –†–µ—à–µ–Ω–∏–µ:
1. –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–∞ Vanilla JavaScript
HTML
```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Vanilla JS Calculator</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      text-align: center;
      margin-top: 50px;
    }

    .calculator {
      width: 300px;
      margin: 0 auto;
      border: 1px solid #ccc;
      border-radius: 8px;
      padding: 20px;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
    }

    .display {
      width: 100%;
      height: 50px;
      font-size: 20px;
      text-align: right;
      margin-bottom: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      padding: 5px;
      box-sizing: border-box;
    }

    .buttons {
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      gap: 10px;
    }

    button {
      padding: 15px;
      font-size: 18px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      background-color: #007bff;
      color: white;
    }

    button:hover {
      background-color: #0056b3;
    }

    button.operation {
      background-color: #ff4d4d;
    }

    button.operation:hover {
      background-color: #ff1a1a;
    }
  </style>
</head>
<body>
  <div class="calculator">
    <input type="text" id="display" class="display" disabled />
    <div class="buttons">
      <button class="number">7</button>
      <button class="number">8</button>
      <button class="number">9</button>
      <button class="operation">/</button>
      <button class="number">4</button>
      <button class="number">5</button>
      <button class="number">6</button>
      <button class="operation">*</button>
      <button class="number">1</button>
      <button class="number">2</button>
      <button class="number">3</button>
      <button class="operation">-</button>
      <button class="number">0</button>
      <button class="clear">C</button>
      <button class="equals">=</button>
      <button class="operation">+</button>
    </div>
  </div>

  <script src="script.js"></script>
</body>
</html>
```
---
JavaScript
```javascript
const display = document.getElementById("display");
const buttons = document.querySelectorAll(".buttons button");

let currentInput = ""; // –¢–µ–∫—É—â–µ–µ –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
let previousInput = ""; // –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
let operation = null; // –¢–µ–∫—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
buttons.forEach((button) => {
  button.addEventListener("click", () => {
    const value = button.textContent;

    if (button.classList.contains("number")) {
      currentInput += value;
      display.value = currentInput;
    } else if (button.classList.contains("operation")) {
      if (currentInput === "") return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
      previousInput = currentInput;
      currentInput = "";
      operation = value;
    } else if (button.classList.contains("equals")) {
      if (operation && previousInput !== "" && currentInput !== "") {
        currentInput = calculate(previousInput, currentInput, operation);
        display.value = currentInput;
        previousInput = "";
        operation = null;
      }
    } else if (button.classList.contains("clear")) {
      currentInput = "";
      previousInput = "";
      operation = null;
      display.value = "";
    }
  });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
function calculate(a, b, operation) {
  const num1 = parseFloat(a);
  const num2 = parseFloat(b);

  switch (operation) {
    case "+":
      return (num1 + num2).toString();
    case "-":
      return (num1 - num2).toString();
    case "*":
      return (num1 * num2).toString();
    case "/":
      return num2 !== 0 ? (num1 / num2).toString() : "Error";
    default:
      return "";
  }
}
```
---------------------
2. –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–∞ React
---
–ö–æ–¥ React
```jsx
import React, { useState } from "react";

function Calculator() {
  const [display, setDisplay] = useState("");
  const [previousInput, setPreviousInput] = useState("");
  const [operation, setOperation] = useState(null);

  const handleNumberClick = (value) => {
    setDisplay(display + value);
  };

  const handleOperationClick = (value) => {
    if (!display) return;
    setPreviousInput(display);
    setDisplay("");
    setOperation(value);
  };

  const handleEqualsClick = () => {
    if (!operation || !previousInput || !display) return;
    const result = calculate(previousInput, display, operation);
    setDisplay(result);
    setPreviousInput("");
    setOperation(null);
  };

  const handleClearClick = () => {
    setDisplay("");
    setPreviousInput("");
    setOperation(null);
  };

  const calculate = (a, b, operation) => {
    const num1 = parseFloat(a);
    const num2 = parseFloat(b);

    switch (operation) {
      case "+":
        return (num1 + num2).toString();
      case "-":
        return (num1 - num2).toString();
      case "*":
        return (num1 * num2).toString();
      case "/":
        return num2 !== 0 ? (num1 / num2).toString() : "Error";
      default:
        return "";
    }
  };

  return (
    <div style={styles.calculator}>
      <input type="text" value={display} readOnly style={styles.display} />
      <div style={styles.buttons}>
        {["7", "8", "9", "/"].map((btn) => (
          <button
            key={btn}
            onClick={() =>
              btn === "/" ? handleOperationClick("/") : handleNumberClick(btn)
            }
            style={btn === "/" ? styles.operationButton : styles.button}
          >
            {btn}
          </button>
        ))}
        {["4", "5", "6", "*"].map((btn) => (
          <button
            key={btn}
            onClick={() =>
              btn === "*" ? handleOperationClick("*") : handleNumberClick(btn)
            }
            style={btn === "*" ? styles.operationButton : styles.button}
          >
            {btn}
          </button>
        ))}
        {["1", "2", "3", "-"].map((btn) => (
          <button
            key={btn}
            onClick={() =>
              btn === "-" ? handleOperationClick("-") : handleNumberClick(btn)
            }
            style={btn === "-" ? styles.operationButton : styles.button}
          >
            {btn}
          </button>
        ))}
        {["0", "C", "=", "+"].map((btn) => (
          <button
            key={btn}
            onClick={() => {
              if (btn === "C") handleClearClick();
              else if (btn === "=") handleEqualsClick();
              else if (btn === "+") handleOperationClick("+");
              else handleNumberClick(btn);
            }}
            style={btn === "+" || btn === "=" ? styles.operationButton : styles.button}
          >
            {btn}
          </button>
        ))}
      </div>
    </div>
  );
}

const styles = {
  calculator: {
    width: "300px",
    margin: "50px auto",
    padding: "20px",
    border: "1px solid #ccc",
    borderRadius: "8px",
    boxShadow: "0 4px 10px rgba(0, 0, 0, 0.2)",
  },
  display: {
    width: "100%",
    height: "50px",
    fontSize: "20px",
    textAlign: "right",
    marginBottom: "10px",
    border: "1px solid #ccc",
    borderRadius: "5px",
    padding: "5px",
    boxSizing: "border-box",
  },
  buttons: {
    display: "grid",
    gridTemplateColumns: "repeat(4, 1fr)",
    gap: "10px",
  },
  button: {
    padding: "15px",
    fontSize: "18px",
    border: "none",
    borderRadius: "5px",
    cursor: "pointer",
    backgroundColor: "#007bff",
    color: "white",
  },
  operationButton: {
    padding: "15px",
    fontSize: "18px",
    border: "none",
    borderRadius: "5px",
    cursor: "pointer",
    backgroundColor: "#ff4d4d",
    color: "white",
  },
};

export default Calculator;
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ
Vanilla JS:
- –°–æ—Å—Ç–æ—è–Ω–∏–µ:
  - `currentInput` –∏ `previousInput` —Ö—Ä–∞–Ω—è—Ç —Ç–µ–∫—É—â–µ–µ –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.
- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π:
  - –ö–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç —Ü–∏—Ñ—Ä—ã, –∑–∞–¥–∞—é—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –æ—á–∏—â–∞—é—Ç —ç–∫—Ä–∞–Ω.
- –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π:
  - –§—É–Ω–∫—Ü–∏—è `calculate` –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è.
React:
- –°–æ—Å—Ç–æ—è–Ω–∏—è:
  - –•—É–∫–∏ `useState` —Ö—Ä–∞–Ω—è—Ç —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é.
- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π:
  - `handleNumberClick`, `handleOperationClick` –∏ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç –¥–µ–π—Å—Ç–≤–∏—è.
- UI:
  - –ö–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —Å –ø–æ–º–æ—â—å—é –º–∞—Å—Å–∏–≤–∞ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∫–æ–¥–∞.
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏:
---
‚åõ –ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—Å–∞—Ç—å —Ä–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏:
üéØ –†–µ—à–µ–Ω–∏–µ:
1. Vanilla JavaScript
HTML
```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Cost Calculator</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      padding: 20px;
      background-color: #f4f4f4;
    }

    .container {
      max-width: 400px;
      margin: 0 auto;
      background: #fff;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    input, select, button {
      width: 100%;
      margin-bottom: 10px;
      padding: 10px;
      font-size: 16px;
      border: 1px solid #ccc;
      border-radius: 5px;
    }

    button {
      background-color: #007bff;
      color: white;
      cursor: pointer;
    }

    button:hover {
      background-color: #0056b3;
    }

    .result {
      font-size: 18px;
      font-weight: bold;
      color: #333;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Cost Calculator</h1>
    <input type="number" id="quantity" placeholder="Enter quantity" />
    <select id="pricePerUnit">
      <option value="10">Price per unit: $10</option>
      <option value="20">Price per unit: $20</option>
      <option value="30">Price per unit: $30</option>
    </select>
    <button id="calculateBtn">Calculate</button>
    <p class="result" id="result">Total cost: $0</p>
  </div>

  <script src="script.js"></script>
</body>
</html>
```
---
JavaScript
```javascript
// –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ DOM
const quantityInput = document.getElementById('quantity');
const priceSelect = document.getElementById('pricePerUnit');
const calculateBtn = document.getElementById('calculateBtn');
const result = document.getElementById('result');

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
calculateBtn.addEventListener('click', () => {
  const quantity = parseInt(quantityInput.value) || 0;
  const pricePerUnit = parseInt(priceSelect.value) || 0;

  const totalCost = quantity * pricePerUnit;

  result.textContent = `Total cost: $${totalCost}`;
});
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ (Vanilla JS):
1. HTML:
   - –ü–æ–ª–µ –≤–≤–æ–¥–∞ `<input>` –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.
   - –°–µ–ª–µ–∫—Ç `<select>` –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ü–µ–Ω—É –∑–∞ –µ–¥–∏–Ω–∏—Ü—É.
   - –ö–Ω–æ–ø–∫–∞ `<button>` –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—Å—á—ë—Ç.
   - –≠–ª–µ–º–µ–Ω—Ç `<p>` –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å.
2. JS:
   - –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–æ–ª–µ–π —Å –ø–æ–º–æ—â—å—é `value`.
   - –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å, —É–º–Ω–æ–∂–∞—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Ü–µ–Ω—É.
   - –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ `<p>`.
---
2. –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ React
–ö–æ–¥ React
```jsx
import React, { useState } from "react";

function CostCalculator() {
  const [quantity, setQuantity] = useState(0);
  const [pricePerUnit, setPricePerUnit] = useState(10);
  const [totalCost, setTotalCost] = useState(0);

  const calculateCost = () => {
    setTotalCost(quantity * pricePerUnit);
  };

  return (
    <div style={styles.container}>
      <h1>Cost Calculator</h1>
      <input
        type="number"
        value={quantity}
        onChange={(e) => setQuantity(Number(e.target.value))}
        placeholder="Enter quantity"
        style={styles.input}
      />
      <select
        value={pricePerUnit}
        onChange={(e) => setPricePerUnit(Number(e.target.value))}
        style={styles.input}
      >
        <option value={10}>Price per unit: $10</option>
        <option value={20}>Price per unit: $20</option>
        <option value={30}>Price per unit: $30</option>
      </select>
      <button onClick={calculateCost} style={styles.button}>
        Calculate
      </button>
      <p style={styles.result}>Total cost: ${totalCost}</p>
    </div>
  );
}

const styles = {
  container: {
    maxWidth: "400px",
    margin: "0 auto",
    padding: "20px",
    background: "#fff",
    borderRadius: "8px",
    boxShadow: "0 2px 10px rgba(0, 0, 0, 0.1)",
  },
  input: {
    width: "100%",
    marginBottom: "10px",
    padding: "10px",
    fontSize: "16px",
    border: "1px solid #ccc",
    borderRadius: "5px",
  },
  button: {
    width: "100%",
    padding: "10px",
    fontSize: "16px",
    backgroundColor: "#007bff",
    color: "white",
    border: "none",
    borderRadius: "5px",
    cursor: "pointer",
  },
  result: {
    fontSize: "18px",
    fontWeight: "bold",
    color: "#333",
  },
};

export default CostCalculator;
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ (React):
1. –°–æ—Å—Ç–æ—è–Ω–∏—è (`useState`):
   - `quantity`: –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.
   - `pricePerUnit`: –•—Ä–∞–Ω–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ü–µ–Ω—É –∑–∞ –µ–¥–∏–Ω–∏—Ü—É.
   - `totalCost`: –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å.
2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π:
   - –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏–ª–∏ —Å–µ–ª–µ–∫—Ç–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è `onChange`, –∫–æ—Ç–æ—Ä—ã–π –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ `setQuantity` –∏–ª–∏ `setPricePerUnit`.
3. –†–∞—Å—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏:
   - –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ `Calculate` –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è `calculateCost`, –∫–æ—Ç–æ—Ä–∞—è —É–º–Ω–æ–∂–∞–µ—Ç `quantity` –Ω–∞ `pricePerUnit` –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ `totalCost`.
4. –°—Ç–∏–ª–∏:
   - –°—Ç–∏–ª–∏ –∑–∞–¥–∞—é—Ç—Å—è –≤ –æ–±—ä–µ–∫—Ç–µ `styles` –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è.
---
–ö–∞–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—å React-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:
1. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç React:
   ```bash
   npx create-react-app cost-calculator
   cd cost-calculator
   ```
2. –ó–∞–º–µ–Ω–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ `src/App.js` –Ω–∞ –∫–æ–¥ React.
3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:
   ```bash
   npm start
   ```
–†–µ–∑—É–ª—å—Ç–∞—Ç:
–ò –≤ –≤–µ—Ä—Å–∏–∏ Vanilla JS, –∏ –≤ –≤–µ—Ä—Å–∏–∏ React –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç:
- –í–≤–æ–¥–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.
- –í—ã–±–∏—Ä–∞—Ç—å —Ü–µ–Ω—É –∑–∞ –µ–¥–∏–Ω–∏—Ü—É.
- –ù–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏.
- –í–∏–¥–µ—Ç—å –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
---------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –°–ø–∏—Å–æ–∫ to do:
---
‚åõ –ó–∞–¥–∞—á–∞: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å To-Do List —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, —É–¥–∞–ª–µ–Ω–∏—è –∏ –æ—Ç–º–µ—Ç–∫–∏ –∑–∞–¥–∞—á –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ React.
–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏.
2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∑–∞–¥–∞—á–∏.
3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–º–µ—á–∞—Ç—å –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ.
4. –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ.
üéØ –†–µ—à–µ–Ω–∏–µ:
1. –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
–°–æ–∑–¥–∞–¥–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç `TodoApp`, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á.
```jsx
import React, { useState } from "react";

function TodoApp() {
  const [tasks, setTasks] = useState([]);
  const [newTask, setNewTask] = useState("");

  const addTask = () => {
    if (newTask.trim() === "") return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏
    const task = { id: Date.now(), text: newTask, completed: false };
    setTasks([...tasks, task]);
    setNewTask(""); // –°–±—Ä–æ—Å –ø–æ–ª—è –≤–≤–æ–¥–∞
  };

  const deleteTask = (id) => {
    setTasks(tasks.filter((task) => task.id !== id));
  };

  const toggleTaskCompletion = (id) => {
    setTasks(
      tasks.map((task) =>
        task.id === id ? { ...task, completed: !task.completed } : task
      )
    );
  };

  return (
    <div>
      <h1>To-Do List</h1>
      <div>
        <input
          type="text"
          value={newTask}
          onChange={(e) => setNewTask(e.target.value)}
          placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É"
        />
        <button onClick={addTask}>–î–æ–±–∞–≤–∏—Ç—å</button>
      </div>
      <ul>
        {tasks.map((task) => (
          <li key={task.id}>
            <span
              style={{
                textDecoration: task.completed ? "line-through" : "none",
                cursor: "pointer",
              }}
              onClick={() => toggleTaskCompletion(task.id)}
            >
              {task.text}
            </span>
            <button onClick={() => deleteTask(task.id)}>–£–¥–∞–ª–∏—Ç—å</button>
          </li>
        ))}
      </ul>
    </div>
  );
}

export default TodoApp;
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
1. –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–¥–∞—á:
   - –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ `useState` –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á:
     ```jsx
     const [tasks, setTasks] = useState([]);
     ```
   - –ö–∞–∂–¥–∞—è –∑–∞–¥–∞—á–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –æ–±—ä–µ–∫—Ç–æ–º —Å —Ç—Ä–µ–º—è —Å–≤–æ–π—Å—Ç–≤–∞–º–∏:
     - `id`: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏.
     - `text`: –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏.
     - `completed`: –§–ª–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (`true`/`false`).
2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:
   - –°–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –∑–∞–¥–∞—á–∏:
     ```jsx
     const task = { id: Date.now(), text: newTask, completed: false };
     ```
   - –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫ —Å–ø–∏—Å–∫—É —Å –ø–æ–º–æ—â—å—é:
     ```jsx
     setTasks([...tasks, task]);
     ```
3. –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:
   - –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, –∏—Å–∫–ª—é—á–∞—è –∑–∞–¥–∞—á—É —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º `id`:
     ```jsx
     setTasks(tasks.filter((task) => task.id !== id));
     ```
4. –û—Ç–º–µ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π:
   - –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ `map`, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ `completed` –¥–ª—è –Ω—É–∂–Ω–æ–π –∑–∞–¥–∞—á–∏:
     ```jsx
     setTasks(
       tasks.map((task) =>
         task.id === id ? { ...task, completed: !task.completed } : task
       )
     );
     ```
5. –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∑–∞–¥–∞—á:
   - –ò—Å–ø–æ–ª—å–∑—É–µ–º `map` –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏ –≤ —Å–ø–∏—Å–∫–µ:
     ```jsx
     tasks.map((task) => (
       <li key={task.id}>
         <span>{task.text}</span>
       </li>
     ));
     ```
   - –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∑–∞—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:
     ```jsx
     style={{ textDecoration: task.completed ? "line-through" : "none" }}
     ```
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:
1. –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
–î–æ–±–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç:
```jsx
{tasks.length === 0 && <p>–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç</p>}
```
2. –í–∞–ª–∏–¥–∞—Ü–∏—è
–ò–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ –≤–≤–æ–¥ –ø—É—Å—Ç—ã—Ö –∑–∞–¥–∞—á:
```jsx
if (newTask.trim() === "") return;
```
3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ `localStorage`
–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∑–∞–¥–∞—á–∏ –≤ `localStorage`, —á—Ç–æ–±—ã –æ–Ω–∏ —Å–æ—Ö—Ä–∞–Ω—è–ª–∏—Å—å –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:
```jsx
useEffect(() => {
  const savedTasks = JSON.parse(localStorage.getItem("tasks"));
  if (savedTasks) {
    setTasks(savedTasks);
  }
}, []);

useEffect(() => {
  localStorage.setItem("tasks", JSON.stringify(tasks));
}, [tasks]);
```
---
–ü—Ä–∏–º–µ—Ä —Å—Ç–∏–ª–µ–π (CSS):
```css
body {
  font-family: Arial, sans-serif;
  margin: 0;
  padding: 20px;
  background-color: #f4f4f4;
}

h1 {
  color: #333;
}

input {
  padding: 8px;
  margin-right: 10px;
}

button {
  padding: 8px 12px;
  cursor: pointer;
}

ul {
  list-style: none;
  padding: 0;
}

li {
  margin: 10px 0;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

span {
  cursor: pointer;
}

button {
  background-color: #ff4d4d;
  color: white;
  border: none;
  border-radius: 5px;
}

button:hover {
  background-color: #ff1a1a;
}
```
–ö–∞–∫ —ç—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç React —Å –ø–æ–º–æ—â—å—é:
   ```bash
   npx create-react-app todo-app
   cd todo-app
   ```
2. –ó–∞–º–µ–Ω–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ `App.js` –Ω–∞ –∫–æ–¥ –∏–∑ –∑–∞–¥–∞—á–∏.
3. –î–æ–±–∞–≤—å—Ç–µ —Å—Ç–∏–ª–∏ –≤ —Ñ–∞–π–ª `App.css`.
4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:
   ```bash
   npm start
   ```
---------------------------------------------------------------------------------------------  
