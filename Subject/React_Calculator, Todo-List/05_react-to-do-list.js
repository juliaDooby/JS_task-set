---------------------------------------------------------------------------------------------  
‚ãô ‚ùç –°–ø–∏—Å–æ–∫ to do:
---
‚åõ –ó–∞–¥–∞—á–∞: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å To-Do List —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, —É–¥–∞–ª–µ–Ω–∏—è –∏ –æ—Ç–º–µ—Ç–∫–∏ –∑–∞–¥–∞—á –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ React.
–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏.
2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∑–∞–¥–∞—á–∏.
3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–º–µ—á–∞—Ç—å –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ.
4. –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ.
üéØ –†–µ—à–µ–Ω–∏–µ:
1. –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
–°–æ–∑–¥–∞–¥–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç `TodoApp`, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á.
```jsx
import React, { useState } from "react";

function TodoApp() {
  const [tasks, setTasks] = useState([]);
  const [newTask, setNewTask] = useState("");

  const addTask = () => {
    if (newTask.trim() === "") return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏
    const task = { id: Date.now(), text: newTask, completed: false };
    setTasks([...tasks, task]);
    setNewTask(""); // –°–±—Ä–æ—Å –ø–æ–ª—è –≤–≤–æ–¥–∞
  };

  const deleteTask = (id) => {
    setTasks(tasks.filter((task) => task.id !== id));
  };

  const toggleTaskCompletion = (id) => {
    setTasks(
      tasks.map((task) =>
        task.id === id ? { ...task, completed: !task.completed } : task
      )
    );
  };

  return (
    <div>
      <h1>To-Do List</h1>
      <div>
        <input
          type="text"
          value={newTask}
          onChange={(e) => setNewTask(e.target.value)}
          placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É"
        />
        <button onClick={addTask}>–î–æ–±–∞–≤–∏—Ç—å</button>
      </div>
      <ul>
        {tasks.map((task) => (
          <li key={task.id}>
            <span
              style={{
                textDecoration: task.completed ? "line-through" : "none",
                cursor: "pointer",
              }}
              onClick={() => toggleTaskCompletion(task.id)}
            >
              {task.text}
            </span>
            <button onClick={() => deleteTask(task.id)}>–£–¥–∞–ª–∏—Ç—å</button>
          </li>
        ))}
      </ul>
    </div>
  );
}

export default TodoApp;
```
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
1. –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–¥–∞—á:
   - –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ `useState` –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á:
     ```jsx
     const [tasks, setTasks] = useState([]);
     ```
   - –ö–∞–∂–¥–∞—è –∑–∞–¥–∞—á–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –æ–±—ä–µ–∫—Ç–æ–º —Å —Ç—Ä–µ–º—è —Å–≤–æ–π—Å—Ç–≤–∞–º–∏:
     - `id`: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏.
     - `text`: –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏.
     - `completed`: –§–ª–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (`true`/`false`).
2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:
   - –°–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –∑–∞–¥–∞—á–∏:
     ```jsx
     const task = { id: Date.now(), text: newTask, completed: false };
     ```
   - –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫ —Å–ø–∏—Å–∫—É —Å –ø–æ–º–æ—â—å—é:
     ```jsx
     setTasks([...tasks, task]);
     ```
3. –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:
   - –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, –∏—Å–∫–ª—é—á–∞—è –∑–∞–¥–∞—á—É —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º `id`:
     ```jsx
     setTasks(tasks.filter((task) => task.id !== id));
     ```
4. –û—Ç–º–µ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π:
   - –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ `map`, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ `completed` –¥–ª—è –Ω—É–∂–Ω–æ–π –∑–∞–¥–∞—á–∏:
     ```jsx
     setTasks(
       tasks.map((task) =>
         task.id === id ? { ...task, completed: !task.completed } : task
       )
     );
     ```
5. –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∑–∞–¥–∞—á:
   - –ò—Å–ø–æ–ª—å–∑—É–µ–º `map` –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏ –≤ —Å–ø–∏—Å–∫–µ:
     ```jsx
     tasks.map((task) => (
       <li key={task.id}>
         <span>{task.text}</span>
       </li>
     ));
     ```
   - –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∑–∞—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:
     ```jsx
     style={{ textDecoration: task.completed ? "line-through" : "none" }}
     ```
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:
1. –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
–î–æ–±–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç:
```jsx
{tasks.length === 0 && <p>–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç</p>}
```
2. –í–∞–ª–∏–¥–∞—Ü–∏—è
–ò–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ –≤–≤–æ–¥ –ø—É—Å—Ç—ã—Ö –∑–∞–¥–∞—á:
```jsx
if (newTask.trim() === "") return;
```
3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ `localStorage`
–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∑–∞–¥–∞—á–∏ –≤ `localStorage`, —á—Ç–æ–±—ã –æ–Ω–∏ —Å–æ—Ö—Ä–∞–Ω—è–ª–∏—Å—å –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:
```jsx
useEffect(() => {
  const savedTasks = JSON.parse(localStorage.getItem("tasks"));
  if (savedTasks) {
    setTasks(savedTasks);
  }
}, []);

useEffect(() => {
  localStorage.setItem("tasks", JSON.stringify(tasks));
}, [tasks]);
```
---
–ü—Ä–∏–º–µ—Ä —Å—Ç–∏–ª–µ–π (CSS):
```css
body {
  font-family: Arial, sans-serif;
  margin: 0;
  padding: 20px;
  background-color: #f4f4f4;
}

h1 {
  color: #333;
}

input {
  padding: 8px;
  margin-right: 10px;
}

button {
  padding: 8px 12px;
  cursor: pointer;
}

ul {
  list-style: none;
  padding: 0;
}

li {
  margin: 10px 0;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

span {
  cursor: pointer;
}

button {
  background-color: #ff4d4d;
  color: white;
  border: none;
  border-radius: 5px;
}

button:hover {
  background-color: #ff1a1a;
}
```
–ö–∞–∫ —ç—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç React —Å –ø–æ–º–æ—â—å—é:
   ```bash
   npx create-react-app todo-app
   cd todo-app
   ```
2. –ó–∞–º–µ–Ω–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ `App.js` –Ω–∞ –∫–æ–¥ –∏–∑ –∑–∞–¥–∞—á–∏.
3. –î–æ–±–∞–≤—å—Ç–µ —Å—Ç–∏–ª–∏ –≤ —Ñ–∞–π–ª `App.css`.
4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:
   ```bash
   npm start
   ```
---------------------------------------------------------------------------------------------  
